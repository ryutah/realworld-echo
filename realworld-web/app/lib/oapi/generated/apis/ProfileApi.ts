/* tslint:disable */
/* eslint-disable */
/**
 * Conduit API
 * Conduit API documentation
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { GetProfileByUsername200Response } from "../models/index";
import { GetProfileByUsername200ResponseFromJSON } from "../models/index";
import * as runtime from "../runtime";

export interface FollowUserByUsernameRequest {
  username: string;
}

export interface GetProfileByUsernameRequest {
  username: string;
}

export interface UnfollowUserByUsernameRequest {
  username: string;
}

/**
 *
 */
export class ProfileApi extends runtime.BaseAPI {
  /**
   * Follow a user by username
   * Follow a user
   */
  async followUserByUsernameRaw(
    requestParameters: FollowUserByUsernameRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<GetProfileByUsername200Response>> {
    if (
      requestParameters.username === null ||
      requestParameters.username === undefined
    ) {
      throw new runtime.RequiredError(
        "username",
        "Required parameter requestParameters.username was null or undefined when calling followUserByUsername."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // Token authentication
    }

    const response = await this.request(
      {
        path: `/profiles/{username}/follow`.replace(
          `{${"username"}}`,
          encodeURIComponent(String(requestParameters.username))
        ),
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GetProfileByUsername200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Follow a user by username
   * Follow a user
   */
  async followUserByUsername(
    requestParameters: FollowUserByUsernameRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<GetProfileByUsername200Response> {
    const response = await this.followUserByUsernameRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get a profile of a user of the system. Auth is optional
   * Get a profile
   */
  async getProfileByUsernameRaw(
    requestParameters: GetProfileByUsernameRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<GetProfileByUsername200Response>> {
    if (
      requestParameters.username === null ||
      requestParameters.username === undefined
    ) {
      throw new runtime.RequiredError(
        "username",
        "Required parameter requestParameters.username was null or undefined when calling getProfileByUsername."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/profiles/{username}`.replace(
          `{${"username"}}`,
          encodeURIComponent(String(requestParameters.username))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GetProfileByUsername200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Get a profile of a user of the system. Auth is optional
   * Get a profile
   */
  async getProfileByUsername(
    requestParameters: GetProfileByUsernameRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<GetProfileByUsername200Response> {
    const response = await this.getProfileByUsernameRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Unfollow a user by username
   * Unfollow a user
   */
  async unfollowUserByUsernameRaw(
    requestParameters: UnfollowUserByUsernameRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<GetProfileByUsername200Response>> {
    if (
      requestParameters.username === null ||
      requestParameters.username === undefined
    ) {
      throw new runtime.RequiredError(
        "username",
        "Required parameter requestParameters.username was null or undefined when calling unfollowUserByUsername."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // Token authentication
    }

    const response = await this.request(
      {
        path: `/profiles/{username}/follow`.replace(
          `{${"username"}}`,
          encodeURIComponent(String(requestParameters.username))
        ),
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GetProfileByUsername200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Unfollow a user by username
   * Unfollow a user
   */
  async unfollowUserByUsername(
    requestParameters: UnfollowUserByUsernameRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<GetProfileByUsername200Response> {
    const response = await this.unfollowUserByUsernameRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }
}
