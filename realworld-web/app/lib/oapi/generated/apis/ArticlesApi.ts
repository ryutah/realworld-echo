/* tslint:disable */
/* eslint-disable */
/**
 * Conduit API
 * Conduit API documentation
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type {
  CreateArticle201Response,
  CreateArticleRequest,
  GetArticlesFeed200Response,
  UpdateArticleRequest,
} from "../models/index";
import {
  CreateArticle201ResponseFromJSON,
  CreateArticleRequestToJSON,
  GetArticlesFeed200ResponseFromJSON,
  UpdateArticleRequestToJSON,
} from "../models/index";
import * as runtime from "../runtime";

export interface CreateArticleOperationRequest {
  article: CreateArticleRequest;
}

export interface DeleteArticleRequest {
  slug: string;
}

export interface GetArticleRequest {
  slug: string;
}

export interface GetArticlesRequest {
  tag?: string;
  author?: string;
  favorited?: string;
  offset?: number;
  limit?: number;
}

export interface GetArticlesFeedRequest {
  offset?: number;
  limit?: number;
}

export interface UpdateArticleOperationRequest {
  slug: string;
  article: UpdateArticleRequest;
}

/**
 *
 */
export class ArticlesApi extends runtime.BaseAPI {
  /**
   * Create an article. Auth is required
   * Create an article
   */
  async createArticleRaw(
    requestParameters: CreateArticleOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<CreateArticle201Response>> {
    if (
      requestParameters.article === null ||
      requestParameters.article === undefined
    ) {
      throw new runtime.RequiredError(
        "article",
        "Required parameter requestParameters.article was null or undefined when calling createArticle."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // Token authentication
    }

    const response = await this.request(
      {
        path: `/articles`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: CreateArticleRequestToJSON(requestParameters.article),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CreateArticle201ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Create an article. Auth is required
   * Create an article
   */
  async createArticle(
    requestParameters: CreateArticleOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<CreateArticle201Response> {
    const response = await this.createArticleRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Delete an article. Auth is required
   * Delete an article
   */
  async deleteArticleRaw(
    requestParameters: DeleteArticleRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.slug === null ||
      requestParameters.slug === undefined
    ) {
      throw new runtime.RequiredError(
        "slug",
        "Required parameter requestParameters.slug was null or undefined when calling deleteArticle."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // Token authentication
    }

    const response = await this.request(
      {
        path: `/articles/{slug}`.replace(
          `{${"slug"}}`,
          encodeURIComponent(String(requestParameters.slug))
        ),
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Delete an article. Auth is required
   * Delete an article
   */
  async deleteArticle(
    requestParameters: DeleteArticleRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.deleteArticleRaw(requestParameters, initOverrides);
  }

  /**
   * Get an article. Auth not required
   * Get an article
   */
  async getArticleRaw(
    requestParameters: GetArticleRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<CreateArticle201Response>> {
    if (
      requestParameters.slug === null ||
      requestParameters.slug === undefined
    ) {
      throw new runtime.RequiredError(
        "slug",
        "Required parameter requestParameters.slug was null or undefined when calling getArticle."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/articles/{slug}`.replace(
          `{${"slug"}}`,
          encodeURIComponent(String(requestParameters.slug))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CreateArticle201ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Get an article. Auth not required
   * Get an article
   */
  async getArticle(
    requestParameters: GetArticleRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<CreateArticle201Response> {
    const response = await this.getArticleRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Get most recent articles globally. Use query parameters to filter results. Auth is optional
   * Get recent articles globally
   */
  async getArticlesRaw(
    requestParameters: GetArticlesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<GetArticlesFeed200Response>> {
    const queryParameters: any = {};

    if (requestParameters.tag !== undefined) {
      queryParameters["tag"] = requestParameters.tag;
    }

    if (requestParameters.author !== undefined) {
      queryParameters["author"] = requestParameters.author;
    }

    if (requestParameters.favorited !== undefined) {
      queryParameters["favorited"] = requestParameters.favorited;
    }

    if (requestParameters.offset !== undefined) {
      queryParameters["offset"] = requestParameters.offset;
    }

    if (requestParameters.limit !== undefined) {
      queryParameters["limit"] = requestParameters.limit;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/articles`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GetArticlesFeed200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Get most recent articles globally. Use query parameters to filter results. Auth is optional
   * Get recent articles globally
   */
  async getArticles(
    requestParameters: GetArticlesRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<GetArticlesFeed200Response> {
    const response = await this.getArticlesRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get most recent articles from users you follow. Use query parameters to limit. Auth is required
   * Get recent articles from users you follow
   */
  async getArticlesFeedRaw(
    requestParameters: GetArticlesFeedRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<GetArticlesFeed200Response>> {
    const queryParameters: any = {};

    if (requestParameters.offset !== undefined) {
      queryParameters["offset"] = requestParameters.offset;
    }

    if (requestParameters.limit !== undefined) {
      queryParameters["limit"] = requestParameters.limit;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // Token authentication
    }

    const response = await this.request(
      {
        path: `/articles/feed`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GetArticlesFeed200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Get most recent articles from users you follow. Use query parameters to limit. Auth is required
   * Get recent articles from users you follow
   */
  async getArticlesFeed(
    requestParameters: GetArticlesFeedRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<GetArticlesFeed200Response> {
    const response = await this.getArticlesFeedRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Update an article. Auth is required
   * Update an article
   */
  async updateArticleRaw(
    requestParameters: UpdateArticleOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<CreateArticle201Response>> {
    if (
      requestParameters.slug === null ||
      requestParameters.slug === undefined
    ) {
      throw new runtime.RequiredError(
        "slug",
        "Required parameter requestParameters.slug was null or undefined when calling updateArticle."
      );
    }

    if (
      requestParameters.article === null ||
      requestParameters.article === undefined
    ) {
      throw new runtime.RequiredError(
        "article",
        "Required parameter requestParameters.article was null or undefined when calling updateArticle."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // Token authentication
    }

    const response = await this.request(
      {
        path: `/articles/{slug}`.replace(
          `{${"slug"}}`,
          encodeURIComponent(String(requestParameters.slug))
        ),
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: UpdateArticleRequestToJSON(requestParameters.article),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CreateArticle201ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Update an article. Auth is required
   * Update an article
   */
  async updateArticle(
    requestParameters: UpdateArticleOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<CreateArticle201Response> {
    const response = await this.updateArticleRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }
}
