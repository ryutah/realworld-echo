/* tslint:disable */
/* eslint-disable */
/**
 * Conduit API
 * Conduit API documentation
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type {
  CreateUserRequest,
  Login200Response,
  LoginRequest,
  UpdateCurrentUserRequest,
} from "../models/index";
import {
  CreateUserRequestToJSON,
  Login200ResponseFromJSON,
  LoginRequestToJSON,
  UpdateCurrentUserRequestToJSON,
} from "../models/index";
import * as runtime from "../runtime";

export interface CreateUserOperationRequest {
  body: CreateUserRequest;
}

export interface LoginOperationRequest {
  body: LoginRequest;
}

export interface UpdateCurrentUserOperationRequest {
  body: UpdateCurrentUserRequest;
}

/**
 *
 */
export class UserAndAuthenticationApi extends runtime.BaseAPI {
  /**
   * Register a new user
   */
  async createUserRaw(
    requestParameters: CreateUserOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Login200Response>> {
    if (
      requestParameters.body === null ||
      requestParameters.body === undefined
    ) {
      throw new runtime.RequiredError(
        "body",
        "Required parameter requestParameters.body was null or undefined when calling createUser."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/users`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: CreateUserRequestToJSON(requestParameters.body),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      Login200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Register a new user
   */
  async createUser(
    requestParameters: CreateUserOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Login200Response> {
    const response = await this.createUserRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Gets the currently logged-in user
   * Get current user
   */
  async getCurrentUserRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Login200Response>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // Token authentication
    }

    const response = await this.request(
      {
        path: `/user`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      Login200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Gets the currently logged-in user
   * Get current user
   */
  async getCurrentUser(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Login200Response> {
    const response = await this.getCurrentUserRaw(initOverrides);
    return await response.value();
  }

  /**
   * Login for existing user
   * Existing user login
   */
  async loginRaw(
    requestParameters: LoginOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Login200Response>> {
    if (
      requestParameters.body === null ||
      requestParameters.body === undefined
    ) {
      throw new runtime.RequiredError(
        "body",
        "Required parameter requestParameters.body was null or undefined when calling login."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/users/login`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: LoginRequestToJSON(requestParameters.body),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      Login200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Login for existing user
   * Existing user login
   */
  async login(
    requestParameters: LoginOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Login200Response> {
    const response = await this.loginRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Updated user information for current user
   * Update current user
   */
  async updateCurrentUserRaw(
    requestParameters: UpdateCurrentUserOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Login200Response>> {
    if (
      requestParameters.body === null ||
      requestParameters.body === undefined
    ) {
      throw new runtime.RequiredError(
        "body",
        "Required parameter requestParameters.body was null or undefined when calling updateCurrentUser."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // Token authentication
    }

    const response = await this.request(
      {
        path: `/user`,
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: UpdateCurrentUserRequestToJSON(requestParameters.body),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      Login200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Updated user information for current user
   * Update current user
   */
  async updateCurrentUser(
    requestParameters: UpdateCurrentUserOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Login200Response> {
    const response = await this.updateCurrentUserRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }
}
