/* tslint:disable */
/* eslint-disable */
/**
 * Conduit API
 * Conduit API documentation
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type {
  CreateArticleComment200Response,
  CreateArticleCommentRequest,
  GetArticleComments200Response,
} from "../models/index";
import {
  CreateArticleComment200ResponseFromJSON,
  CreateArticleCommentRequestToJSON,
  GetArticleComments200ResponseFromJSON,
} from "../models/index";
import * as runtime from "../runtime";

export interface CreateArticleCommentOperationRequest {
  slug: string;
  comment: CreateArticleCommentRequest;
}

export interface DeleteArticleCommentRequest {
  slug: string;
  id: number;
}

export interface GetArticleCommentsRequest {
  slug: string;
}

/**
 *
 */
export class CommentsApi extends runtime.BaseAPI {
  /**
   * Create a comment for an article. Auth is required
   * Create a comment for an article
   */
  async createArticleCommentRaw(
    requestParameters: CreateArticleCommentOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<CreateArticleComment200Response>> {
    if (
      requestParameters.slug === null ||
      requestParameters.slug === undefined
    ) {
      throw new runtime.RequiredError(
        "slug",
        "Required parameter requestParameters.slug was null or undefined when calling createArticleComment."
      );
    }

    if (
      requestParameters.comment === null ||
      requestParameters.comment === undefined
    ) {
      throw new runtime.RequiredError(
        "comment",
        "Required parameter requestParameters.comment was null or undefined when calling createArticleComment."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // Token authentication
    }

    const response = await this.request(
      {
        path: `/articles/{slug}/comments`.replace(
          `{${"slug"}}`,
          encodeURIComponent(String(requestParameters.slug))
        ),
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: CreateArticleCommentRequestToJSON(requestParameters.comment),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CreateArticleComment200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Create a comment for an article. Auth is required
   * Create a comment for an article
   */
  async createArticleComment(
    requestParameters: CreateArticleCommentOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<CreateArticleComment200Response> {
    const response = await this.createArticleCommentRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Delete a comment for an article. Auth is required
   * Delete a comment for an article
   */
  async deleteArticleCommentRaw(
    requestParameters: DeleteArticleCommentRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.slug === null ||
      requestParameters.slug === undefined
    ) {
      throw new runtime.RequiredError(
        "slug",
        "Required parameter requestParameters.slug was null or undefined when calling deleteArticleComment."
      );
    }

    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling deleteArticleComment."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // Token authentication
    }

    const response = await this.request(
      {
        path: `/articles/{slug}/comments/{id}`
          .replace(
            `{${"slug"}}`,
            encodeURIComponent(String(requestParameters.slug))
          )
          .replace(
            `{${"id"}}`,
            encodeURIComponent(String(requestParameters.id))
          ),
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Delete a comment for an article. Auth is required
   * Delete a comment for an article
   */
  async deleteArticleComment(
    requestParameters: DeleteArticleCommentRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.deleteArticleCommentRaw(requestParameters, initOverrides);
  }

  /**
   * Get the comments for an article. Auth is optional
   * Get comments for an article
   */
  async getArticleCommentsRaw(
    requestParameters: GetArticleCommentsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<GetArticleComments200Response>> {
    if (
      requestParameters.slug === null ||
      requestParameters.slug === undefined
    ) {
      throw new runtime.RequiredError(
        "slug",
        "Required parameter requestParameters.slug was null or undefined when calling getArticleComments."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/articles/{slug}/comments`.replace(
          `{${"slug"}}`,
          encodeURIComponent(String(requestParameters.slug))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GetArticleComments200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Get the comments for an article. Auth is optional
   * Get comments for an article
   */
  async getArticleComments(
    requestParameters: GetArticleCommentsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<GetArticleComments200Response> {
    const response = await this.getArticleCommentsRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }
}
