// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: article_tag.sql

package gen

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type CreateArticleTagParams struct {
	ArticleSlug uuid.UUID          `db:"article_slug"`
	TagName     string             `db:"tag_name"`
	CreatedAt   pgtype.Timestamptz `db:"created_at"`
	UpdatedAt   pgtype.Timestamptz `db:"updated_at"`
}

const DeleteArticleTagBySlug = `-- name: DeleteArticleTagBySlug :exec
delete from article_tag
where
    article_slug = $1
`

func (q *Queries) DeleteArticleTagBySlug(ctx context.Context, articleSlug uuid.UUID) error {
	_, err := q.db.Exec(ctx, DeleteArticleTagBySlug, articleSlug)
	return err
}

const ListArticleTags = `-- name: ListArticleTags :many
select
    article_tag.article_slug,
    tag.name,
    tag.created_at,
    tag.updated_at
from
    article_tag
    inner join tag on tag.name = article_tag.tag_name
where
    article_slug = any ($1::uuid[])
`

type ListArticleTagsRow struct {
	ArticleSlug uuid.UUID          `db:"article_slug"`
	Name        string             `db:"name"`
	CreatedAt   pgtype.Timestamptz `db:"created_at"`
	UpdatedAt   pgtype.Timestamptz `db:"updated_at"`
}

func (q *Queries) ListArticleTags(ctx context.Context, slugs []uuid.UUID) ([]ListArticleTagsRow, error) {
	rows, err := q.db.Query(ctx, ListArticleTags, slugs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListArticleTagsRow
	for rows.Next() {
		var i ListArticleTagsRow
		if err := rows.Scan(
			&i.ArticleSlug,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
