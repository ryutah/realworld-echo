// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: aticle.sql

package gen

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const GetArticle = `-- name: GetArticle :one
select
    slug, author, body, title, description, created_at, updated_at
from
    article
where
    slug = $1
limit
    1
`

func (q *Queries) GetArticle(ctx context.Context, slug uuid.UUID) (Article, error) {
	row := q.db.QueryRowContext(ctx, GetArticle, slug)
	var i Article
	err := row.Scan(
		&i.Slug,
		&i.Author,
		&i.Body,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const UpsertArticle = `-- name: UpsertArticle :exec
insert into
    article (
        slug,
        author,
        body,
        title,
        description,
        created_at,
        updated_at
    )
values
    ($1, $2, $3, $4, $5, $6, $7)
on conflict (slug) do
update
set
    author = $2,
    body = $3,
    title = $4,
    description = $5,
    updated_at = $7
`

type UpsertArticleParams struct {
	Slug        uuid.UUID `db:"slug"`
	Author      string    `db:"author"`
	Body        string    `db:"body"`
	Title       string    `db:"title"`
	Description string    `db:"description"`
	CreatedAt   time.Time `db:"created_at"`
	UpdatedAt   time.Time `db:"updated_at"`
}

func (q *Queries) UpsertArticle(ctx context.Context, arg UpsertArticleParams) error {
	_, err := q.db.ExecContext(ctx, UpsertArticle,
		arg.Slug,
		arg.Author,
		arg.Body,
		arg.Title,
		arg.Description,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}
