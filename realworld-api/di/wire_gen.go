// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/google/wire"
	"github.com/ryutah/realworld-echo/realworld-api/api/rest"
	"github.com/ryutah/realworld-echo/realworld-api/pkg/xtrace"
	"github.com/ryutah/realworld-echo/realworld-api/usecase"
	"go.opentelemetry.io/otel/sdk/trace"
)

// Injectors from wire.go:

func InitializeLocalRestExecuter() *rest.Extcuter {
	errorOutputPort := rest.NewErrorOutputPort()
	okOutputPort := rest.NewGetArticleOutputPort(errorOutputPort)
	article := usecase.NewArticle(okOutputPort, errorOutputPort)
	restArticle := rest.NewArticle(article)
	server := rest.NewServer(restArticle)
	sampler := trace.NeverSample()
	initializer := xtrace.NewStdoutTracingInitializer(sampler)
	extcuter := rest.NewExecuter(server, initializer)
	return extcuter
}

func InitializeAppEngineRestExecuter(projectID string) *rest.Extcuter {
	errorOutputPort := rest.NewErrorOutputPort()
	okOutputPort := rest.NewGetArticleOutputPort(errorOutputPort)
	article := usecase.NewArticle(okOutputPort, errorOutputPort)
	restArticle := rest.NewArticle(article)
	server := rest.NewServer(restArticle)
	sampler := trace.AlwaysSample()
	initializer := xtrace.NewGoogleCloudTracingInitializer(projectID, sampler)
	extcuter := rest.NewExecuter(server, initializer)
	return extcuter
}

// wire.go:

var (
	restSet       = wire.NewSet(rest.NewServer, rest.NewArticle, inputPortSet)
	inputPortSet  = wire.NewSet(usecase.NewArticle, wire.Bind(new(usecase.GetArticleInputPort), new(*usecase.Article)), outputPortSet)
	outputPortSet = wire.NewSet(rest.NewErrorOutputPort, rest.NewGetArticleOutputPort)
)

var localTraceInitializerSet = wire.NewSet(xtrace.NewStdoutTracingInitializer, trace.NeverSample)

var gcpTraceInitializerSet = wire.NewSet(xtrace.NewGoogleCloudTracingInitializer, trace.AlwaysSample)
