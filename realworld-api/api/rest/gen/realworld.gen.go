// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package gen

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get recent articles globally
	// (GET /articles)
	GetArticles(ctx echo.Context, params GetArticlesParams) error
	// Create an article
	// (POST /articles)
	CreateArticle(ctx echo.Context) error
	// Get recent articles from users you follow
	// (GET /articles/feed)
	GetArticlesFeed(ctx echo.Context, params GetArticlesFeedParams) error
	// Delete an article
	// (DELETE /articles/{slug})
	DeleteArticle(ctx echo.Context, slug string) error
	// Get an article
	// (GET /articles/{slug})
	GetArticle(ctx echo.Context, slug string) error
	// Update an article
	// (PUT /articles/{slug})
	UpdateArticle(ctx echo.Context, slug string) error
	// Get comments for an article
	// (GET /articles/{slug}/comments)
	GetArticleComments(ctx echo.Context, slug string) error
	// Create a comment for an article
	// (POST /articles/{slug}/comments)
	CreateArticleComment(ctx echo.Context, slug string) error
	// Delete a comment for an article
	// (DELETE /articles/{slug}/comments/{id})
	DeleteArticleComment(ctx echo.Context, slug string, id int) error
	// Unfavorite an article
	// (DELETE /articles/{slug}/favorite)
	DeleteArticleFavorite(ctx echo.Context, slug string) error
	// Favorite an article
	// (POST /articles/{slug}/favorite)
	CreateArticleFavorite(ctx echo.Context, slug string) error
	// Get a profile
	// (GET /profiles/{username})
	GetProfileByUsername(ctx echo.Context, username string) error
	// Unfollow a user
	// (DELETE /profiles/{username}/follow)
	UnfollowUserByUsername(ctx echo.Context, username string) error
	// Follow a user
	// (POST /profiles/{username}/follow)
	FollowUserByUsername(ctx echo.Context, username string) error
	// Get tags
	// (GET /tags)
	GetTags(ctx echo.Context) error
	// Get current user
	// (GET /user)
	GetCurrentUser(ctx echo.Context) error
	// Update current user
	// (PUT /user)
	UpdateCurrentUser(ctx echo.Context) error

	// (POST /users)
	CreateUser(ctx echo.Context) error
	// Existing user login
	// (POST /users/login)
	Login(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetArticles converts echo context to params.
func (w *ServerInterfaceWrapper) GetArticles(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetArticlesParams
	// ------------- Optional query parameter "tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag", ctx.QueryParams(), &params.Tag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tag: %s", err))
	}

	// ------------- Optional query parameter "author" -------------

	err = runtime.BindQueryParameter("form", true, false, "author", ctx.QueryParams(), &params.Author)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter author: %s", err))
	}

	// ------------- Optional query parameter "favorited" -------------

	err = runtime.BindQueryParameter("form", true, false, "favorited", ctx.QueryParams(), &params.Favorited)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter favorited: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetArticles(ctx, params)
	return err
}

// CreateArticle converts echo context to params.
func (w *ServerInterfaceWrapper) CreateArticle(ctx echo.Context) error {
	var err error

	ctx.Set(TokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateArticle(ctx)
	return err
}

// GetArticlesFeed converts echo context to params.
func (w *ServerInterfaceWrapper) GetArticlesFeed(ctx echo.Context) error {
	var err error

	ctx.Set(TokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetArticlesFeedParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetArticlesFeed(ctx, params)
	return err
}

// DeleteArticle converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteArticle(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "slug" -------------
	var slug string

	err = runtime.BindStyledParameterWithLocation("simple", false, "slug", runtime.ParamLocationPath, ctx.Param("slug"), &slug)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slug: %s", err))
	}

	ctx.Set(TokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteArticle(ctx, slug)
	return err
}

// GetArticle converts echo context to params.
func (w *ServerInterfaceWrapper) GetArticle(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "slug" -------------
	var slug string

	err = runtime.BindStyledParameterWithLocation("simple", false, "slug", runtime.ParamLocationPath, ctx.Param("slug"), &slug)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slug: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetArticle(ctx, slug)
	return err
}

// UpdateArticle converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateArticle(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "slug" -------------
	var slug string

	err = runtime.BindStyledParameterWithLocation("simple", false, "slug", runtime.ParamLocationPath, ctx.Param("slug"), &slug)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slug: %s", err))
	}

	ctx.Set(TokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateArticle(ctx, slug)
	return err
}

// GetArticleComments converts echo context to params.
func (w *ServerInterfaceWrapper) GetArticleComments(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "slug" -------------
	var slug string

	err = runtime.BindStyledParameterWithLocation("simple", false, "slug", runtime.ParamLocationPath, ctx.Param("slug"), &slug)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slug: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetArticleComments(ctx, slug)
	return err
}

// CreateArticleComment converts echo context to params.
func (w *ServerInterfaceWrapper) CreateArticleComment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "slug" -------------
	var slug string

	err = runtime.BindStyledParameterWithLocation("simple", false, "slug", runtime.ParamLocationPath, ctx.Param("slug"), &slug)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slug: %s", err))
	}

	ctx.Set(TokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateArticleComment(ctx, slug)
	return err
}

// DeleteArticleComment converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteArticleComment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "slug" -------------
	var slug string

	err = runtime.BindStyledParameterWithLocation("simple", false, "slug", runtime.ParamLocationPath, ctx.Param("slug"), &slug)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slug: %s", err))
	}

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(TokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteArticleComment(ctx, slug, id)
	return err
}

// DeleteArticleFavorite converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteArticleFavorite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "slug" -------------
	var slug string

	err = runtime.BindStyledParameterWithLocation("simple", false, "slug", runtime.ParamLocationPath, ctx.Param("slug"), &slug)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slug: %s", err))
	}

	ctx.Set(TokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteArticleFavorite(ctx, slug)
	return err
}

// CreateArticleFavorite converts echo context to params.
func (w *ServerInterfaceWrapper) CreateArticleFavorite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "slug" -------------
	var slug string

	err = runtime.BindStyledParameterWithLocation("simple", false, "slug", runtime.ParamLocationPath, ctx.Param("slug"), &slug)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slug: %s", err))
	}

	ctx.Set(TokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateArticleFavorite(ctx, slug)
	return err
}

// GetProfileByUsername converts echo context to params.
func (w *ServerInterfaceWrapper) GetProfileByUsername(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "username" -------------
	var username string

	err = runtime.BindStyledParameterWithLocation("simple", false, "username", runtime.ParamLocationPath, ctx.Param("username"), &username)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter username: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetProfileByUsername(ctx, username)
	return err
}

// UnfollowUserByUsername converts echo context to params.
func (w *ServerInterfaceWrapper) UnfollowUserByUsername(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "username" -------------
	var username string

	err = runtime.BindStyledParameterWithLocation("simple", false, "username", runtime.ParamLocationPath, ctx.Param("username"), &username)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter username: %s", err))
	}

	ctx.Set(TokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnfollowUserByUsername(ctx, username)
	return err
}

// FollowUserByUsername converts echo context to params.
func (w *ServerInterfaceWrapper) FollowUserByUsername(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "username" -------------
	var username string

	err = runtime.BindStyledParameterWithLocation("simple", false, "username", runtime.ParamLocationPath, ctx.Param("username"), &username)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter username: %s", err))
	}

	ctx.Set(TokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FollowUserByUsername(ctx, username)
	return err
}

// GetTags converts echo context to params.
func (w *ServerInterfaceWrapper) GetTags(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTags(ctx)
	return err
}

// GetCurrentUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetCurrentUser(ctx echo.Context) error {
	var err error

	ctx.Set(TokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCurrentUser(ctx)
	return err
}

// UpdateCurrentUser converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateCurrentUser(ctx echo.Context) error {
	var err error

	ctx.Set(TokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateCurrentUser(ctx)
	return err
}

// CreateUser converts echo context to params.
func (w *ServerInterfaceWrapper) CreateUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateUser(ctx)
	return err
}

// Login converts echo context to params.
func (w *ServerInterfaceWrapper) Login(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Login(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/articles", wrapper.GetArticles)
	router.POST(baseURL+"/articles", wrapper.CreateArticle)
	router.GET(baseURL+"/articles/feed", wrapper.GetArticlesFeed)
	router.DELETE(baseURL+"/articles/:slug", wrapper.DeleteArticle)
	router.GET(baseURL+"/articles/:slug", wrapper.GetArticle)
	router.PUT(baseURL+"/articles/:slug", wrapper.UpdateArticle)
	router.GET(baseURL+"/articles/:slug/comments", wrapper.GetArticleComments)
	router.POST(baseURL+"/articles/:slug/comments", wrapper.CreateArticleComment)
	router.DELETE(baseURL+"/articles/:slug/comments/:id", wrapper.DeleteArticleComment)
	router.DELETE(baseURL+"/articles/:slug/favorite", wrapper.DeleteArticleFavorite)
	router.POST(baseURL+"/articles/:slug/favorite", wrapper.CreateArticleFavorite)
	router.GET(baseURL+"/profiles/:username", wrapper.GetProfileByUsername)
	router.DELETE(baseURL+"/profiles/:username/follow", wrapper.UnfollowUserByUsername)
	router.POST(baseURL+"/profiles/:username/follow", wrapper.FollowUserByUsername)
	router.GET(baseURL+"/tags", wrapper.GetTags)
	router.GET(baseURL+"/user", wrapper.GetCurrentUser)
	router.PUT(baseURL+"/user", wrapper.UpdateCurrentUser)
	router.POST(baseURL+"/users", wrapper.CreateUser)
	router.POST(baseURL+"/users/login", wrapper.Login)

}

type EmptyOkResponseResponse struct {
}

type GenericErrorJSONResponse GenericErrorModel

type MultipleArticlesResponseJSONResponse struct {
	Articles      []Article `json:"articles"`
	ArticlesCount int       `json:"articlesCount"`
}

type MultipleCommentsResponseJSONResponse struct {
	Comments []Comment `json:"comments"`
}

type ProfileResponseJSONResponse struct {
	Profile Profile `json:"profile"`
}

type SingleArticleResponseJSONResponse struct {
	Article Article `json:"article"`
}

type SingleCommentResponseJSONResponse struct {
	Comment Comment `json:"comment"`
}

type TagsResponseJSONResponse struct {
	Tags []string `json:"tags"`
}

type UnauthorizedResponse struct {
}

type UserResponseJSONResponse struct {
	User User `json:"user"`
}

type GetArticlesRequestObject struct {
	Params GetArticlesParams
}

type GetArticlesResponseObject interface {
	VisitGetArticlesResponse(w http.ResponseWriter) error
}

type GetArticles200JSONResponse struct {
	MultipleArticlesResponseJSONResponse
}

func (response GetArticles200JSONResponse) VisitGetArticlesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetArticles401Response = UnauthorizedResponse

func (response GetArticles401Response) VisitGetArticlesResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetArticles422JSONResponse struct{ GenericErrorJSONResponse }

func (response GetArticles422JSONResponse) VisitGetArticlesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type CreateArticleRequestObject struct {
	Body *CreateArticleJSONRequestBody
}

type CreateArticleResponseObject interface {
	VisitCreateArticleResponse(w http.ResponseWriter) error
}

type CreateArticle201JSONResponse struct {
	SingleArticleResponseJSONResponse
}

func (response CreateArticle201JSONResponse) VisitCreateArticleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateArticle401Response = UnauthorizedResponse

func (response CreateArticle401Response) VisitCreateArticleResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type CreateArticle422JSONResponse struct{ GenericErrorJSONResponse }

func (response CreateArticle422JSONResponse) VisitCreateArticleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type GetArticlesFeedRequestObject struct {
	Params GetArticlesFeedParams
}

type GetArticlesFeedResponseObject interface {
	VisitGetArticlesFeedResponse(w http.ResponseWriter) error
}

type GetArticlesFeed200JSONResponse struct {
	MultipleArticlesResponseJSONResponse
}

func (response GetArticlesFeed200JSONResponse) VisitGetArticlesFeedResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetArticlesFeed401Response = UnauthorizedResponse

func (response GetArticlesFeed401Response) VisitGetArticlesFeedResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetArticlesFeed422JSONResponse struct{ GenericErrorJSONResponse }

func (response GetArticlesFeed422JSONResponse) VisitGetArticlesFeedResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type DeleteArticleRequestObject struct {
	Slug string `json:"slug"`
}

type DeleteArticleResponseObject interface {
	VisitDeleteArticleResponse(w http.ResponseWriter) error
}

type DeleteArticle200Response = EmptyOkResponseResponse

func (response DeleteArticle200Response) VisitDeleteArticleResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeleteArticle401Response = UnauthorizedResponse

func (response DeleteArticle401Response) VisitDeleteArticleResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type DeleteArticle422JSONResponse struct{ GenericErrorJSONResponse }

func (response DeleteArticle422JSONResponse) VisitDeleteArticleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type GetArticleRequestObject struct {
	Slug string `json:"slug"`
}

type GetArticleResponseObject interface {
	VisitGetArticleResponse(w http.ResponseWriter) error
}

type GetArticle200JSONResponse struct {
	SingleArticleResponseJSONResponse
}

func (response GetArticle200JSONResponse) VisitGetArticleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetArticle422JSONResponse struct{ GenericErrorJSONResponse }

func (response GetArticle422JSONResponse) VisitGetArticleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type UpdateArticleRequestObject struct {
	Slug string `json:"slug"`
	Body *UpdateArticleJSONRequestBody
}

type UpdateArticleResponseObject interface {
	VisitUpdateArticleResponse(w http.ResponseWriter) error
}

type UpdateArticle200JSONResponse struct {
	SingleArticleResponseJSONResponse
}

func (response UpdateArticle200JSONResponse) VisitUpdateArticleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateArticle401Response = UnauthorizedResponse

func (response UpdateArticle401Response) VisitUpdateArticleResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type UpdateArticle422JSONResponse struct{ GenericErrorJSONResponse }

func (response UpdateArticle422JSONResponse) VisitUpdateArticleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type GetArticleCommentsRequestObject struct {
	Slug string `json:"slug"`
}

type GetArticleCommentsResponseObject interface {
	VisitGetArticleCommentsResponse(w http.ResponseWriter) error
}

type GetArticleComments200JSONResponse struct {
	MultipleCommentsResponseJSONResponse
}

func (response GetArticleComments200JSONResponse) VisitGetArticleCommentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetArticleComments401Response = UnauthorizedResponse

func (response GetArticleComments401Response) VisitGetArticleCommentsResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetArticleComments422JSONResponse struct{ GenericErrorJSONResponse }

func (response GetArticleComments422JSONResponse) VisitGetArticleCommentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type CreateArticleCommentRequestObject struct {
	Slug string `json:"slug"`
	Body *CreateArticleCommentJSONRequestBody
}

type CreateArticleCommentResponseObject interface {
	VisitCreateArticleCommentResponse(w http.ResponseWriter) error
}

type CreateArticleComment200JSONResponse struct {
	SingleCommentResponseJSONResponse
}

func (response CreateArticleComment200JSONResponse) VisitCreateArticleCommentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateArticleComment401Response = UnauthorizedResponse

func (response CreateArticleComment401Response) VisitCreateArticleCommentResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type CreateArticleComment422JSONResponse struct{ GenericErrorJSONResponse }

func (response CreateArticleComment422JSONResponse) VisitCreateArticleCommentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type DeleteArticleCommentRequestObject struct {
	Slug string `json:"slug"`
	Id   int    `json:"id"`
}

type DeleteArticleCommentResponseObject interface {
	VisitDeleteArticleCommentResponse(w http.ResponseWriter) error
}

type DeleteArticleComment200Response = EmptyOkResponseResponse

func (response DeleteArticleComment200Response) VisitDeleteArticleCommentResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeleteArticleComment401Response = UnauthorizedResponse

func (response DeleteArticleComment401Response) VisitDeleteArticleCommentResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type DeleteArticleComment422JSONResponse struct{ GenericErrorJSONResponse }

func (response DeleteArticleComment422JSONResponse) VisitDeleteArticleCommentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type DeleteArticleFavoriteRequestObject struct {
	Slug string `json:"slug"`
}

type DeleteArticleFavoriteResponseObject interface {
	VisitDeleteArticleFavoriteResponse(w http.ResponseWriter) error
}

type DeleteArticleFavorite200JSONResponse struct {
	SingleArticleResponseJSONResponse
}

func (response DeleteArticleFavorite200JSONResponse) VisitDeleteArticleFavoriteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteArticleFavorite401Response = UnauthorizedResponse

func (response DeleteArticleFavorite401Response) VisitDeleteArticleFavoriteResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type DeleteArticleFavorite422JSONResponse struct{ GenericErrorJSONResponse }

func (response DeleteArticleFavorite422JSONResponse) VisitDeleteArticleFavoriteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type CreateArticleFavoriteRequestObject struct {
	Slug string `json:"slug"`
}

type CreateArticleFavoriteResponseObject interface {
	VisitCreateArticleFavoriteResponse(w http.ResponseWriter) error
}

type CreateArticleFavorite200JSONResponse struct {
	SingleArticleResponseJSONResponse
}

func (response CreateArticleFavorite200JSONResponse) VisitCreateArticleFavoriteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateArticleFavorite401Response = UnauthorizedResponse

func (response CreateArticleFavorite401Response) VisitCreateArticleFavoriteResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type CreateArticleFavorite422JSONResponse struct{ GenericErrorJSONResponse }

func (response CreateArticleFavorite422JSONResponse) VisitCreateArticleFavoriteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type GetProfileByUsernameRequestObject struct {
	Username string `json:"username"`
}

type GetProfileByUsernameResponseObject interface {
	VisitGetProfileByUsernameResponse(w http.ResponseWriter) error
}

type GetProfileByUsername200JSONResponse struct{ ProfileResponseJSONResponse }

func (response GetProfileByUsername200JSONResponse) VisitGetProfileByUsernameResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetProfileByUsername401Response = UnauthorizedResponse

func (response GetProfileByUsername401Response) VisitGetProfileByUsernameResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetProfileByUsername422JSONResponse struct{ GenericErrorJSONResponse }

func (response GetProfileByUsername422JSONResponse) VisitGetProfileByUsernameResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type UnfollowUserByUsernameRequestObject struct {
	Username string `json:"username"`
}

type UnfollowUserByUsernameResponseObject interface {
	VisitUnfollowUserByUsernameResponse(w http.ResponseWriter) error
}

type UnfollowUserByUsername200JSONResponse struct{ ProfileResponseJSONResponse }

func (response UnfollowUserByUsername200JSONResponse) VisitUnfollowUserByUsernameResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UnfollowUserByUsername401Response = UnauthorizedResponse

func (response UnfollowUserByUsername401Response) VisitUnfollowUserByUsernameResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type UnfollowUserByUsername422JSONResponse struct{ GenericErrorJSONResponse }

func (response UnfollowUserByUsername422JSONResponse) VisitUnfollowUserByUsernameResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type FollowUserByUsernameRequestObject struct {
	Username string `json:"username"`
}

type FollowUserByUsernameResponseObject interface {
	VisitFollowUserByUsernameResponse(w http.ResponseWriter) error
}

type FollowUserByUsername200JSONResponse struct{ ProfileResponseJSONResponse }

func (response FollowUserByUsername200JSONResponse) VisitFollowUserByUsernameResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type FollowUserByUsername401Response = UnauthorizedResponse

func (response FollowUserByUsername401Response) VisitFollowUserByUsernameResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type FollowUserByUsername422JSONResponse struct{ GenericErrorJSONResponse }

func (response FollowUserByUsername422JSONResponse) VisitFollowUserByUsernameResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type GetTagsRequestObject struct {
}

type GetTagsResponseObject interface {
	VisitGetTagsResponse(w http.ResponseWriter) error
}

type GetTags200JSONResponse struct{ TagsResponseJSONResponse }

func (response GetTags200JSONResponse) VisitGetTagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetTags422JSONResponse struct{ GenericErrorJSONResponse }

func (response GetTags422JSONResponse) VisitGetTagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type GetCurrentUserRequestObject struct {
}

type GetCurrentUserResponseObject interface {
	VisitGetCurrentUserResponse(w http.ResponseWriter) error
}

type GetCurrentUser200JSONResponse struct{ UserResponseJSONResponse }

func (response GetCurrentUser200JSONResponse) VisitGetCurrentUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCurrentUser401Response = UnauthorizedResponse

func (response GetCurrentUser401Response) VisitGetCurrentUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetCurrentUser422JSONResponse struct{ GenericErrorJSONResponse }

func (response GetCurrentUser422JSONResponse) VisitGetCurrentUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type UpdateCurrentUserRequestObject struct {
	Body *UpdateCurrentUserJSONRequestBody
}

type UpdateCurrentUserResponseObject interface {
	VisitUpdateCurrentUserResponse(w http.ResponseWriter) error
}

type UpdateCurrentUser200JSONResponse struct{ UserResponseJSONResponse }

func (response UpdateCurrentUser200JSONResponse) VisitUpdateCurrentUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateCurrentUser401Response = UnauthorizedResponse

func (response UpdateCurrentUser401Response) VisitUpdateCurrentUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type UpdateCurrentUser422JSONResponse struct{ GenericErrorJSONResponse }

func (response UpdateCurrentUser422JSONResponse) VisitUpdateCurrentUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type CreateUserRequestObject struct {
	Body *CreateUserJSONRequestBody
}

type CreateUserResponseObject interface {
	VisitCreateUserResponse(w http.ResponseWriter) error
}

type CreateUser201JSONResponse struct{ UserResponseJSONResponse }

func (response CreateUser201JSONResponse) VisitCreateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateUser422JSONResponse struct{ GenericErrorJSONResponse }

func (response CreateUser422JSONResponse) VisitCreateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type LoginRequestObject struct {
	Body *LoginJSONRequestBody
}

type LoginResponseObject interface {
	VisitLoginResponse(w http.ResponseWriter) error
}

type Login200JSONResponse struct{ UserResponseJSONResponse }

func (response Login200JSONResponse) VisitLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type Login401Response = UnauthorizedResponse

func (response Login401Response) VisitLoginResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type Login422JSONResponse struct{ GenericErrorJSONResponse }

func (response Login422JSONResponse) VisitLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get recent articles globally
	// (GET /articles)
	GetArticles(ctx context.Context, request GetArticlesRequestObject) (GetArticlesResponseObject, error)
	// Create an article
	// (POST /articles)
	CreateArticle(ctx context.Context, request CreateArticleRequestObject) (CreateArticleResponseObject, error)
	// Get recent articles from users you follow
	// (GET /articles/feed)
	GetArticlesFeed(ctx context.Context, request GetArticlesFeedRequestObject) (GetArticlesFeedResponseObject, error)
	// Delete an article
	// (DELETE /articles/{slug})
	DeleteArticle(ctx context.Context, request DeleteArticleRequestObject) (DeleteArticleResponseObject, error)
	// Get an article
	// (GET /articles/{slug})
	GetArticle(ctx context.Context, request GetArticleRequestObject) (GetArticleResponseObject, error)
	// Update an article
	// (PUT /articles/{slug})
	UpdateArticle(ctx context.Context, request UpdateArticleRequestObject) (UpdateArticleResponseObject, error)
	// Get comments for an article
	// (GET /articles/{slug}/comments)
	GetArticleComments(ctx context.Context, request GetArticleCommentsRequestObject) (GetArticleCommentsResponseObject, error)
	// Create a comment for an article
	// (POST /articles/{slug}/comments)
	CreateArticleComment(ctx context.Context, request CreateArticleCommentRequestObject) (CreateArticleCommentResponseObject, error)
	// Delete a comment for an article
	// (DELETE /articles/{slug}/comments/{id})
	DeleteArticleComment(ctx context.Context, request DeleteArticleCommentRequestObject) (DeleteArticleCommentResponseObject, error)
	// Unfavorite an article
	// (DELETE /articles/{slug}/favorite)
	DeleteArticleFavorite(ctx context.Context, request DeleteArticleFavoriteRequestObject) (DeleteArticleFavoriteResponseObject, error)
	// Favorite an article
	// (POST /articles/{slug}/favorite)
	CreateArticleFavorite(ctx context.Context, request CreateArticleFavoriteRequestObject) (CreateArticleFavoriteResponseObject, error)
	// Get a profile
	// (GET /profiles/{username})
	GetProfileByUsername(ctx context.Context, request GetProfileByUsernameRequestObject) (GetProfileByUsernameResponseObject, error)
	// Unfollow a user
	// (DELETE /profiles/{username}/follow)
	UnfollowUserByUsername(ctx context.Context, request UnfollowUserByUsernameRequestObject) (UnfollowUserByUsernameResponseObject, error)
	// Follow a user
	// (POST /profiles/{username}/follow)
	FollowUserByUsername(ctx context.Context, request FollowUserByUsernameRequestObject) (FollowUserByUsernameResponseObject, error)
	// Get tags
	// (GET /tags)
	GetTags(ctx context.Context, request GetTagsRequestObject) (GetTagsResponseObject, error)
	// Get current user
	// (GET /user)
	GetCurrentUser(ctx context.Context, request GetCurrentUserRequestObject) (GetCurrentUserResponseObject, error)
	// Update current user
	// (PUT /user)
	UpdateCurrentUser(ctx context.Context, request UpdateCurrentUserRequestObject) (UpdateCurrentUserResponseObject, error)

	// (POST /users)
	CreateUser(ctx context.Context, request CreateUserRequestObject) (CreateUserResponseObject, error)
	// Existing user login
	// (POST /users/login)
	Login(ctx context.Context, request LoginRequestObject) (LoginResponseObject, error)
}

type StrictHandlerFunc func(ctx echo.Context, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetArticles operation middleware
func (sh *strictHandler) GetArticles(ctx echo.Context, params GetArticlesParams) error {
	var request GetArticlesRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetArticles(ctx.Request().Context(), request.(GetArticlesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetArticles")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetArticlesResponseObject); ok {
		return validResponse.VisitGetArticlesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// CreateArticle operation middleware
func (sh *strictHandler) CreateArticle(ctx echo.Context) error {
	var request CreateArticleRequestObject

	var body CreateArticleJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateArticle(ctx.Request().Context(), request.(CreateArticleRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateArticle")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreateArticleResponseObject); ok {
		return validResponse.VisitCreateArticleResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetArticlesFeed operation middleware
func (sh *strictHandler) GetArticlesFeed(ctx echo.Context, params GetArticlesFeedParams) error {
	var request GetArticlesFeedRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetArticlesFeed(ctx.Request().Context(), request.(GetArticlesFeedRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetArticlesFeed")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetArticlesFeedResponseObject); ok {
		return validResponse.VisitGetArticlesFeedResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// DeleteArticle operation middleware
func (sh *strictHandler) DeleteArticle(ctx echo.Context, slug string) error {
	var request DeleteArticleRequestObject

	request.Slug = slug

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteArticle(ctx.Request().Context(), request.(DeleteArticleRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteArticle")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteArticleResponseObject); ok {
		return validResponse.VisitDeleteArticleResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetArticle operation middleware
func (sh *strictHandler) GetArticle(ctx echo.Context, slug string) error {
	var request GetArticleRequestObject

	request.Slug = slug

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetArticle(ctx.Request().Context(), request.(GetArticleRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetArticle")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetArticleResponseObject); ok {
		return validResponse.VisitGetArticleResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// UpdateArticle operation middleware
func (sh *strictHandler) UpdateArticle(ctx echo.Context, slug string) error {
	var request UpdateArticleRequestObject

	request.Slug = slug

	var body UpdateArticleJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateArticle(ctx.Request().Context(), request.(UpdateArticleRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateArticle")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UpdateArticleResponseObject); ok {
		return validResponse.VisitUpdateArticleResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetArticleComments operation middleware
func (sh *strictHandler) GetArticleComments(ctx echo.Context, slug string) error {
	var request GetArticleCommentsRequestObject

	request.Slug = slug

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetArticleComments(ctx.Request().Context(), request.(GetArticleCommentsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetArticleComments")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetArticleCommentsResponseObject); ok {
		return validResponse.VisitGetArticleCommentsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// CreateArticleComment operation middleware
func (sh *strictHandler) CreateArticleComment(ctx echo.Context, slug string) error {
	var request CreateArticleCommentRequestObject

	request.Slug = slug

	var body CreateArticleCommentJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateArticleComment(ctx.Request().Context(), request.(CreateArticleCommentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateArticleComment")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreateArticleCommentResponseObject); ok {
		return validResponse.VisitCreateArticleCommentResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// DeleteArticleComment operation middleware
func (sh *strictHandler) DeleteArticleComment(ctx echo.Context, slug string, id int) error {
	var request DeleteArticleCommentRequestObject

	request.Slug = slug
	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteArticleComment(ctx.Request().Context(), request.(DeleteArticleCommentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteArticleComment")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteArticleCommentResponseObject); ok {
		return validResponse.VisitDeleteArticleCommentResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// DeleteArticleFavorite operation middleware
func (sh *strictHandler) DeleteArticleFavorite(ctx echo.Context, slug string) error {
	var request DeleteArticleFavoriteRequestObject

	request.Slug = slug

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteArticleFavorite(ctx.Request().Context(), request.(DeleteArticleFavoriteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteArticleFavorite")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteArticleFavoriteResponseObject); ok {
		return validResponse.VisitDeleteArticleFavoriteResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// CreateArticleFavorite operation middleware
func (sh *strictHandler) CreateArticleFavorite(ctx echo.Context, slug string) error {
	var request CreateArticleFavoriteRequestObject

	request.Slug = slug

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateArticleFavorite(ctx.Request().Context(), request.(CreateArticleFavoriteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateArticleFavorite")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreateArticleFavoriteResponseObject); ok {
		return validResponse.VisitCreateArticleFavoriteResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetProfileByUsername operation middleware
func (sh *strictHandler) GetProfileByUsername(ctx echo.Context, username string) error {
	var request GetProfileByUsernameRequestObject

	request.Username = username

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetProfileByUsername(ctx.Request().Context(), request.(GetProfileByUsernameRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProfileByUsername")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetProfileByUsernameResponseObject); ok {
		return validResponse.VisitGetProfileByUsernameResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// UnfollowUserByUsername operation middleware
func (sh *strictHandler) UnfollowUserByUsername(ctx echo.Context, username string) error {
	var request UnfollowUserByUsernameRequestObject

	request.Username = username

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UnfollowUserByUsername(ctx.Request().Context(), request.(UnfollowUserByUsernameRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UnfollowUserByUsername")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UnfollowUserByUsernameResponseObject); ok {
		return validResponse.VisitUnfollowUserByUsernameResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// FollowUserByUsername operation middleware
func (sh *strictHandler) FollowUserByUsername(ctx echo.Context, username string) error {
	var request FollowUserByUsernameRequestObject

	request.Username = username

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.FollowUserByUsername(ctx.Request().Context(), request.(FollowUserByUsernameRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "FollowUserByUsername")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(FollowUserByUsernameResponseObject); ok {
		return validResponse.VisitFollowUserByUsernameResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetTags operation middleware
func (sh *strictHandler) GetTags(ctx echo.Context) error {
	var request GetTagsRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetTags(ctx.Request().Context(), request.(GetTagsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTags")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetTagsResponseObject); ok {
		return validResponse.VisitGetTagsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetCurrentUser operation middleware
func (sh *strictHandler) GetCurrentUser(ctx echo.Context) error {
	var request GetCurrentUserRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCurrentUser(ctx.Request().Context(), request.(GetCurrentUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCurrentUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetCurrentUserResponseObject); ok {
		return validResponse.VisitGetCurrentUserResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// UpdateCurrentUser operation middleware
func (sh *strictHandler) UpdateCurrentUser(ctx echo.Context) error {
	var request UpdateCurrentUserRequestObject

	var body UpdateCurrentUserJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateCurrentUser(ctx.Request().Context(), request.(UpdateCurrentUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateCurrentUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UpdateCurrentUserResponseObject); ok {
		return validResponse.VisitUpdateCurrentUserResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// CreateUser operation middleware
func (sh *strictHandler) CreateUser(ctx echo.Context) error {
	var request CreateUserRequestObject

	var body CreateUserJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateUser(ctx.Request().Context(), request.(CreateUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreateUserResponseObject); ok {
		return validResponse.VisitCreateUserResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// Login operation middleware
func (sh *strictHandler) Login(ctx echo.Context) error {
	var request LoginRequestObject

	var body LoginJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Login(ctx.Request().Context(), request.(LoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Login")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(LoginResponseObject); ok {
		return validResponse.VisitLoginResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"oUQAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
