// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package gen

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	TokenScopes = "Token.Scopes"
)

// Article defines model for Article.
type Article struct {
	Author         Profile   `json:"author"`
	Body           string    `json:"body"`
	CreatedAt      time.Time `json:"createdAt"`
	Description    string    `json:"description"`
	Favorited      bool      `json:"favorited"`
	FavoritesCount int       `json:"favoritesCount"`
	Slug           string    `json:"slug"`
	TagList        []string  `json:"tagList"`
	Title          string    `json:"title"`
	UpdatedAt      time.Time `json:"updatedAt"`
}

// Comment defines model for Comment.
type Comment struct {
	Author    Profile   `json:"author"`
	Body      string    `json:"body"`
	CreatedAt time.Time `json:"createdAt"`
	Id        int       `json:"id"`
	UpdatedAt time.Time `json:"updatedAt"`
}

// GenericErrorModel defines model for GenericErrorModel.
type GenericErrorModel struct {
	Errors struct {
		Body []string `json:"body"`
	} `json:"errors"`
}

// LoginUser defines model for LoginUser.
type LoginUser struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

// NewArticle defines model for NewArticle.
type NewArticle struct {
	Body        string    `json:"body" validate:"required"`
	Description string    `json:"description" validate:"required"`
	TagList     *[]string `json:"tagList,omitempty"`
	Title       string    `json:"title" validate:"required"`
}

// NewComment defines model for NewComment.
type NewComment struct {
	Body string `json:"body" validate:"required"`
}

// NewUser defines model for NewUser.
type NewUser struct {
	Email    string `json:"email" validate:"required,email"`
	Password string `json:"password" validate:"required"`
	Username string `json:"username" validate:"required"`
}

// Profile defines model for Profile.
type Profile struct {
	Bio       string `json:"bio"`
	Following bool   `json:"following"`
	Image     string `json:"image"`
	Username  string `json:"username"`
}

// UpdateArticle defines model for UpdateArticle.
type UpdateArticle struct {
	Body        *string `json:"body,omitempty"`
	Description *string `json:"description,omitempty"`
	Title       *string `json:"title,omitempty"`
}

// UpdateUser defines model for UpdateUser.
type UpdateUser struct {
	Bio      *string `json:"bio,omitempty"`
	Email    *string `json:"email,omitempty"`
	Image    *string `json:"image,omitempty"`
	Password *string `json:"password,omitempty"`
	Username *string `json:"username,omitempty"`
}

// User defines model for User.
type User struct {
	Bio      string `json:"bio"`
	Email    string `json:"email"`
	Image    string `json:"image"`
	Token    string `json:"token"`
	Username string `json:"username"`
}

// LimitParam defines model for limitParam.
type LimitParam = int

// OffsetParam defines model for offsetParam.
type OffsetParam = int

// GenericError defines model for GenericError.
type GenericError = GenericErrorModel

// MultipleArticlesResponse defines model for MultipleArticlesResponse.
type MultipleArticlesResponse struct {
	Articles      []Article `json:"articles"`
	ArticlesCount int       `json:"articlesCount"`
}

// MultipleCommentsResponse defines model for MultipleCommentsResponse.
type MultipleCommentsResponse struct {
	Comments []Comment `json:"comments"`
}

// ProfileResponse defines model for ProfileResponse.
type ProfileResponse struct {
	Profile Profile `json:"profile"`
}

// SingleArticleResponse defines model for SingleArticleResponse.
type SingleArticleResponse struct {
	Article Article `json:"article"`
}

// SingleCommentResponse defines model for SingleCommentResponse.
type SingleCommentResponse struct {
	Comment Comment `json:"comment"`
}

// TagsResponse defines model for TagsResponse.
type TagsResponse struct {
	Tags []string `json:"tags"`
}

// UserResponse defines model for UserResponse.
type UserResponse struct {
	User User `json:"user"`
}

// LoginUserRequest defines model for LoginUserRequest.
type LoginUserRequest struct {
	User LoginUser `json:"user"`
}

// NewArticleRequest defines model for NewArticleRequest.
type NewArticleRequest struct {
	Article NewArticle `json:"article"`
}

// NewCommentRequest defines model for NewCommentRequest.
type NewCommentRequest struct {
	Comment NewComment `json:"comment"`
}

// NewUserRequest defines model for NewUserRequest.
type NewUserRequest struct {
	User NewUser `json:"user"`
}

// UpdateArticleRequest defines model for UpdateArticleRequest.
type UpdateArticleRequest struct {
	Article UpdateArticle `json:"article"`
}

// UpdateUserRequest defines model for UpdateUserRequest.
type UpdateUserRequest struct {
	User UpdateUser `json:"user"`
}

// GetArticlesParams defines parameters for GetArticles.
type GetArticlesParams struct {
	// Tag Filter by tag
	Tag *string `form:"tag,omitempty" json:"tag,omitempty"`

	// Author Filter by author (username)
	Author *string `form:"author,omitempty" json:"author,omitempty"`

	// Favorited Filter by favorites of a user (username)
	Favorited *string `form:"favorited,omitempty" json:"favorited,omitempty"`

	// Offset The number of items to skip before starting to collect the result set.
	Offset *OffsetParam `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit The numbers of items to return.
	Limit *LimitParam `form:"limit,omitempty" json:"limit,omitempty"`
}

// CreateArticleJSONBody defines parameters for CreateArticle.
type CreateArticleJSONBody struct {
	Article NewArticle `json:"article"`
}

// GetArticlesFeedParams defines parameters for GetArticlesFeed.
type GetArticlesFeedParams struct {
	// Offset The number of items to skip before starting to collect the result set.
	Offset *OffsetParam `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit The numbers of items to return.
	Limit *LimitParam `form:"limit,omitempty" json:"limit,omitempty"`
}

// UpdateArticleJSONBody defines parameters for UpdateArticle.
type UpdateArticleJSONBody struct {
	Article UpdateArticle `json:"article"`
}

// CreateArticleCommentJSONBody defines parameters for CreateArticleComment.
type CreateArticleCommentJSONBody struct {
	Comment NewComment `json:"comment"`
}

// UpdateCurrentUserJSONBody defines parameters for UpdateCurrentUser.
type UpdateCurrentUserJSONBody struct {
	User UpdateUser `json:"user"`
}

// CreateUserJSONBody defines parameters for CreateUser.
type CreateUserJSONBody struct {
	User NewUser `json:"user"`
}

// LoginJSONBody defines parameters for Login.
type LoginJSONBody struct {
	User LoginUser `json:"user"`
}

// CreateArticleJSONRequestBody defines body for CreateArticle for application/json ContentType.
type CreateArticleJSONRequestBody CreateArticleJSONBody

// UpdateArticleJSONRequestBody defines body for UpdateArticle for application/json ContentType.
type UpdateArticleJSONRequestBody UpdateArticleJSONBody

// CreateArticleCommentJSONRequestBody defines body for CreateArticleComment for application/json ContentType.
type CreateArticleCommentJSONRequestBody CreateArticleCommentJSONBody

// UpdateCurrentUserJSONRequestBody defines body for UpdateCurrentUser for application/json ContentType.
type UpdateCurrentUserJSONRequestBody UpdateCurrentUserJSONBody

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody CreateUserJSONBody

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody LoginJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetArticles request
	GetArticles(ctx context.Context, params *GetArticlesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateArticle request with any body
	CreateArticleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateArticle(ctx context.Context, body CreateArticleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetArticlesFeed request
	GetArticlesFeed(ctx context.Context, params *GetArticlesFeedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteArticle request
	DeleteArticle(ctx context.Context, slug string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetArticle request
	GetArticle(ctx context.Context, slug string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateArticle request with any body
	UpdateArticleWithBody(ctx context.Context, slug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateArticle(ctx context.Context, slug string, body UpdateArticleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetArticleComments request
	GetArticleComments(ctx context.Context, slug string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateArticleComment request with any body
	CreateArticleCommentWithBody(ctx context.Context, slug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateArticleComment(ctx context.Context, slug string, body CreateArticleCommentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteArticleComment request
	DeleteArticleComment(ctx context.Context, slug string, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteArticleFavorite request
	DeleteArticleFavorite(ctx context.Context, slug string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateArticleFavorite request
	CreateArticleFavorite(ctx context.Context, slug string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProfileByUsername request
	GetProfileByUsername(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UnfollowUserByUsername request
	UnfollowUserByUsername(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FollowUserByUsername request
	FollowUserByUsername(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTags request
	GetTags(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCurrentUser request
	GetCurrentUser(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateCurrentUser request with any body
	UpdateCurrentUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateCurrentUser(ctx context.Context, body UpdateCurrentUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateUser request with any body
	CreateUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateUser(ctx context.Context, body CreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Login request with any body
	LoginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Login(ctx context.Context, body LoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetArticles(ctx context.Context, params *GetArticlesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetArticlesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateArticleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateArticleRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateArticle(ctx context.Context, body CreateArticleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateArticleRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetArticlesFeed(ctx context.Context, params *GetArticlesFeedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetArticlesFeedRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteArticle(ctx context.Context, slug string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteArticleRequest(c.Server, slug)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetArticle(ctx context.Context, slug string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetArticleRequest(c.Server, slug)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateArticleWithBody(ctx context.Context, slug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateArticleRequestWithBody(c.Server, slug, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateArticle(ctx context.Context, slug string, body UpdateArticleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateArticleRequest(c.Server, slug, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetArticleComments(ctx context.Context, slug string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetArticleCommentsRequest(c.Server, slug)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateArticleCommentWithBody(ctx context.Context, slug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateArticleCommentRequestWithBody(c.Server, slug, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateArticleComment(ctx context.Context, slug string, body CreateArticleCommentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateArticleCommentRequest(c.Server, slug, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteArticleComment(ctx context.Context, slug string, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteArticleCommentRequest(c.Server, slug, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteArticleFavorite(ctx context.Context, slug string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteArticleFavoriteRequest(c.Server, slug)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateArticleFavorite(ctx context.Context, slug string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateArticleFavoriteRequest(c.Server, slug)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProfileByUsername(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProfileByUsernameRequest(c.Server, username)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UnfollowUserByUsername(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUnfollowUserByUsernameRequest(c.Server, username)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FollowUserByUsername(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFollowUserByUsernameRequest(c.Server, username)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTags(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTagsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCurrentUser(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCurrentUserRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCurrentUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCurrentUserRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCurrentUser(ctx context.Context, body UpdateCurrentUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCurrentUserRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUserRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUser(ctx context.Context, body CreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUserRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LoginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLoginRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Login(ctx context.Context, body LoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLoginRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetArticlesRequest generates requests for GetArticles
func NewGetArticlesRequest(server string, params *GetArticlesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/articles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Tag != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tag", runtime.ParamLocationQuery, *params.Tag); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Author != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "author", runtime.ParamLocationQuery, *params.Author); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Favorited != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "favorited", runtime.ParamLocationQuery, *params.Favorited); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateArticleRequest calls the generic CreateArticle builder with application/json body
func NewCreateArticleRequest(server string, body CreateArticleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateArticleRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateArticleRequestWithBody generates requests for CreateArticle with any type of body
func NewCreateArticleRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/articles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetArticlesFeedRequest generates requests for GetArticlesFeed
func NewGetArticlesFeedRequest(server string, params *GetArticlesFeedParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/articles/feed")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteArticleRequest generates requests for DeleteArticle
func NewDeleteArticleRequest(server string, slug string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "slug", runtime.ParamLocationPath, slug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/articles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetArticleRequest generates requests for GetArticle
func NewGetArticleRequest(server string, slug string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "slug", runtime.ParamLocationPath, slug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/articles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateArticleRequest calls the generic UpdateArticle builder with application/json body
func NewUpdateArticleRequest(server string, slug string, body UpdateArticleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateArticleRequestWithBody(server, slug, "application/json", bodyReader)
}

// NewUpdateArticleRequestWithBody generates requests for UpdateArticle with any type of body
func NewUpdateArticleRequestWithBody(server string, slug string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "slug", runtime.ParamLocationPath, slug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/articles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetArticleCommentsRequest generates requests for GetArticleComments
func NewGetArticleCommentsRequest(server string, slug string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "slug", runtime.ParamLocationPath, slug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/articles/%s/comments", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateArticleCommentRequest calls the generic CreateArticleComment builder with application/json body
func NewCreateArticleCommentRequest(server string, slug string, body CreateArticleCommentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateArticleCommentRequestWithBody(server, slug, "application/json", bodyReader)
}

// NewCreateArticleCommentRequestWithBody generates requests for CreateArticleComment with any type of body
func NewCreateArticleCommentRequestWithBody(server string, slug string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "slug", runtime.ParamLocationPath, slug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/articles/%s/comments", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteArticleCommentRequest generates requests for DeleteArticleComment
func NewDeleteArticleCommentRequest(server string, slug string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "slug", runtime.ParamLocationPath, slug)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/articles/%s/comments/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteArticleFavoriteRequest generates requests for DeleteArticleFavorite
func NewDeleteArticleFavoriteRequest(server string, slug string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "slug", runtime.ParamLocationPath, slug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/articles/%s/favorite", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateArticleFavoriteRequest generates requests for CreateArticleFavorite
func NewCreateArticleFavoriteRequest(server string, slug string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "slug", runtime.ParamLocationPath, slug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/articles/%s/favorite", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProfileByUsernameRequest generates requests for GetProfileByUsername
func NewGetProfileByUsernameRequest(server string, username string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/profiles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUnfollowUserByUsernameRequest generates requests for UnfollowUserByUsername
func NewUnfollowUserByUsernameRequest(server string, username string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/profiles/%s/follow", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFollowUserByUsernameRequest generates requests for FollowUserByUsername
func NewFollowUserByUsernameRequest(server string, username string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/profiles/%s/follow", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTagsRequest generates requests for GetTags
func NewGetTagsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tags")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCurrentUserRequest generates requests for GetCurrentUser
func NewGetCurrentUserRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateCurrentUserRequest calls the generic UpdateCurrentUser builder with application/json body
func NewUpdateCurrentUserRequest(server string, body UpdateCurrentUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateCurrentUserRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateCurrentUserRequestWithBody generates requests for UpdateCurrentUser with any type of body
func NewUpdateCurrentUserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateUserRequest calls the generic CreateUser builder with application/json body
func NewCreateUserRequest(server string, body CreateUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateUserRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateUserRequestWithBody generates requests for CreateUser with any type of body
func NewCreateUserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewLoginRequest calls the generic Login builder with application/json body
func NewLoginRequest(server string, body LoginJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewLoginRequestWithBody(server, "application/json", bodyReader)
}

// NewLoginRequestWithBody generates requests for Login with any type of body
func NewLoginRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/login")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetArticles request
	GetArticlesWithResponse(ctx context.Context, params *GetArticlesParams, reqEditors ...RequestEditorFn) (*GetArticlesResponse, error)

	// CreateArticle request with any body
	CreateArticleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateArticleResponse, error)

	CreateArticleWithResponse(ctx context.Context, body CreateArticleJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateArticleResponse, error)

	// GetArticlesFeed request
	GetArticlesFeedWithResponse(ctx context.Context, params *GetArticlesFeedParams, reqEditors ...RequestEditorFn) (*GetArticlesFeedResponse, error)

	// DeleteArticle request
	DeleteArticleWithResponse(ctx context.Context, slug string, reqEditors ...RequestEditorFn) (*DeleteArticleResponse, error)

	// GetArticle request
	GetArticleWithResponse(ctx context.Context, slug string, reqEditors ...RequestEditorFn) (*GetArticleResponse, error)

	// UpdateArticle request with any body
	UpdateArticleWithBodyWithResponse(ctx context.Context, slug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateArticleResponse, error)

	UpdateArticleWithResponse(ctx context.Context, slug string, body UpdateArticleJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateArticleResponse, error)

	// GetArticleComments request
	GetArticleCommentsWithResponse(ctx context.Context, slug string, reqEditors ...RequestEditorFn) (*GetArticleCommentsResponse, error)

	// CreateArticleComment request with any body
	CreateArticleCommentWithBodyWithResponse(ctx context.Context, slug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateArticleCommentResponse, error)

	CreateArticleCommentWithResponse(ctx context.Context, slug string, body CreateArticleCommentJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateArticleCommentResponse, error)

	// DeleteArticleComment request
	DeleteArticleCommentWithResponse(ctx context.Context, slug string, id int, reqEditors ...RequestEditorFn) (*DeleteArticleCommentResponse, error)

	// DeleteArticleFavorite request
	DeleteArticleFavoriteWithResponse(ctx context.Context, slug string, reqEditors ...RequestEditorFn) (*DeleteArticleFavoriteResponse, error)

	// CreateArticleFavorite request
	CreateArticleFavoriteWithResponse(ctx context.Context, slug string, reqEditors ...RequestEditorFn) (*CreateArticleFavoriteResponse, error)

	// GetProfileByUsername request
	GetProfileByUsernameWithResponse(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*GetProfileByUsernameResponse, error)

	// UnfollowUserByUsername request
	UnfollowUserByUsernameWithResponse(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*UnfollowUserByUsernameResponse, error)

	// FollowUserByUsername request
	FollowUserByUsernameWithResponse(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*FollowUserByUsernameResponse, error)

	// GetTags request
	GetTagsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTagsResponse, error)

	// GetCurrentUser request
	GetCurrentUserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCurrentUserResponse, error)

	// UpdateCurrentUser request with any body
	UpdateCurrentUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCurrentUserResponse, error)

	UpdateCurrentUserWithResponse(ctx context.Context, body UpdateCurrentUserJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCurrentUserResponse, error)

	// CreateUser request with any body
	CreateUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUserResponse, error)

	CreateUserWithResponse(ctx context.Context, body CreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateUserResponse, error)

	// Login request with any body
	LoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LoginResponse, error)

	LoginWithResponse(ctx context.Context, body LoginJSONRequestBody, reqEditors ...RequestEditorFn) (*LoginResponse, error)
}

type GetArticlesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Articles      []Article `json:"articles"`
		ArticlesCount int       `json:"articlesCount"`
	}
	JSON422 *GenericErrorModel
}

// Status returns HTTPResponse.Status
func (r GetArticlesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetArticlesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateArticleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Article Article `json:"article"`
	}
	JSON422 *GenericErrorModel
}

// Status returns HTTPResponse.Status
func (r CreateArticleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateArticleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetArticlesFeedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Articles      []Article `json:"articles"`
		ArticlesCount int       `json:"articlesCount"`
	}
	JSON422 *GenericErrorModel
}

// Status returns HTTPResponse.Status
func (r GetArticlesFeedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetArticlesFeedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteArticleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON422      *GenericErrorModel
}

// Status returns HTTPResponse.Status
func (r DeleteArticleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteArticleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetArticleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Article Article `json:"article"`
	}
	JSON422 *GenericErrorModel
}

// Status returns HTTPResponse.Status
func (r GetArticleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetArticleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateArticleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Article Article `json:"article"`
	}
	JSON422 *GenericErrorModel
}

// Status returns HTTPResponse.Status
func (r UpdateArticleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateArticleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetArticleCommentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Comments []Comment `json:"comments"`
	}
	JSON422 *GenericErrorModel
}

// Status returns HTTPResponse.Status
func (r GetArticleCommentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetArticleCommentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateArticleCommentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Comment Comment `json:"comment"`
	}
	JSON422 *GenericErrorModel
}

// Status returns HTTPResponse.Status
func (r CreateArticleCommentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateArticleCommentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteArticleCommentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON422      *GenericErrorModel
}

// Status returns HTTPResponse.Status
func (r DeleteArticleCommentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteArticleCommentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteArticleFavoriteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Article Article `json:"article"`
	}
	JSON422 *GenericErrorModel
}

// Status returns HTTPResponse.Status
func (r DeleteArticleFavoriteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteArticleFavoriteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateArticleFavoriteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Article Article `json:"article"`
	}
	JSON422 *GenericErrorModel
}

// Status returns HTTPResponse.Status
func (r CreateArticleFavoriteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateArticleFavoriteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProfileByUsernameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Profile Profile `json:"profile"`
	}
	JSON422 *GenericErrorModel
}

// Status returns HTTPResponse.Status
func (r GetProfileByUsernameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProfileByUsernameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UnfollowUserByUsernameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Profile Profile `json:"profile"`
	}
	JSON422 *GenericErrorModel
}

// Status returns HTTPResponse.Status
func (r UnfollowUserByUsernameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UnfollowUserByUsernameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FollowUserByUsernameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Profile Profile `json:"profile"`
	}
	JSON422 *GenericErrorModel
}

// Status returns HTTPResponse.Status
func (r FollowUserByUsernameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FollowUserByUsernameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Tags []string `json:"tags"`
	}
	JSON422 *GenericErrorModel
}

// Status returns HTTPResponse.Status
func (r GetTagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCurrentUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		User User `json:"user"`
	}
	JSON422 *GenericErrorModel
}

// Status returns HTTPResponse.Status
func (r GetCurrentUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCurrentUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateCurrentUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		User User `json:"user"`
	}
	JSON422 *GenericErrorModel
}

// Status returns HTTPResponse.Status
func (r UpdateCurrentUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateCurrentUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		User User `json:"user"`
	}
	JSON422 *GenericErrorModel
}

// Status returns HTTPResponse.Status
func (r CreateUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LoginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		User User `json:"user"`
	}
	JSON422 *GenericErrorModel
}

// Status returns HTTPResponse.Status
func (r LoginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LoginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetArticlesWithResponse request returning *GetArticlesResponse
func (c *ClientWithResponses) GetArticlesWithResponse(ctx context.Context, params *GetArticlesParams, reqEditors ...RequestEditorFn) (*GetArticlesResponse, error) {
	rsp, err := c.GetArticles(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetArticlesResponse(rsp)
}

// CreateArticleWithBodyWithResponse request with arbitrary body returning *CreateArticleResponse
func (c *ClientWithResponses) CreateArticleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateArticleResponse, error) {
	rsp, err := c.CreateArticleWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateArticleResponse(rsp)
}

func (c *ClientWithResponses) CreateArticleWithResponse(ctx context.Context, body CreateArticleJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateArticleResponse, error) {
	rsp, err := c.CreateArticle(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateArticleResponse(rsp)
}

// GetArticlesFeedWithResponse request returning *GetArticlesFeedResponse
func (c *ClientWithResponses) GetArticlesFeedWithResponse(ctx context.Context, params *GetArticlesFeedParams, reqEditors ...RequestEditorFn) (*GetArticlesFeedResponse, error) {
	rsp, err := c.GetArticlesFeed(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetArticlesFeedResponse(rsp)
}

// DeleteArticleWithResponse request returning *DeleteArticleResponse
func (c *ClientWithResponses) DeleteArticleWithResponse(ctx context.Context, slug string, reqEditors ...RequestEditorFn) (*DeleteArticleResponse, error) {
	rsp, err := c.DeleteArticle(ctx, slug, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteArticleResponse(rsp)
}

// GetArticleWithResponse request returning *GetArticleResponse
func (c *ClientWithResponses) GetArticleWithResponse(ctx context.Context, slug string, reqEditors ...RequestEditorFn) (*GetArticleResponse, error) {
	rsp, err := c.GetArticle(ctx, slug, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetArticleResponse(rsp)
}

// UpdateArticleWithBodyWithResponse request with arbitrary body returning *UpdateArticleResponse
func (c *ClientWithResponses) UpdateArticleWithBodyWithResponse(ctx context.Context, slug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateArticleResponse, error) {
	rsp, err := c.UpdateArticleWithBody(ctx, slug, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateArticleResponse(rsp)
}

func (c *ClientWithResponses) UpdateArticleWithResponse(ctx context.Context, slug string, body UpdateArticleJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateArticleResponse, error) {
	rsp, err := c.UpdateArticle(ctx, slug, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateArticleResponse(rsp)
}

// GetArticleCommentsWithResponse request returning *GetArticleCommentsResponse
func (c *ClientWithResponses) GetArticleCommentsWithResponse(ctx context.Context, slug string, reqEditors ...RequestEditorFn) (*GetArticleCommentsResponse, error) {
	rsp, err := c.GetArticleComments(ctx, slug, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetArticleCommentsResponse(rsp)
}

// CreateArticleCommentWithBodyWithResponse request with arbitrary body returning *CreateArticleCommentResponse
func (c *ClientWithResponses) CreateArticleCommentWithBodyWithResponse(ctx context.Context, slug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateArticleCommentResponse, error) {
	rsp, err := c.CreateArticleCommentWithBody(ctx, slug, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateArticleCommentResponse(rsp)
}

func (c *ClientWithResponses) CreateArticleCommentWithResponse(ctx context.Context, slug string, body CreateArticleCommentJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateArticleCommentResponse, error) {
	rsp, err := c.CreateArticleComment(ctx, slug, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateArticleCommentResponse(rsp)
}

// DeleteArticleCommentWithResponse request returning *DeleteArticleCommentResponse
func (c *ClientWithResponses) DeleteArticleCommentWithResponse(ctx context.Context, slug string, id int, reqEditors ...RequestEditorFn) (*DeleteArticleCommentResponse, error) {
	rsp, err := c.DeleteArticleComment(ctx, slug, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteArticleCommentResponse(rsp)
}

// DeleteArticleFavoriteWithResponse request returning *DeleteArticleFavoriteResponse
func (c *ClientWithResponses) DeleteArticleFavoriteWithResponse(ctx context.Context, slug string, reqEditors ...RequestEditorFn) (*DeleteArticleFavoriteResponse, error) {
	rsp, err := c.DeleteArticleFavorite(ctx, slug, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteArticleFavoriteResponse(rsp)
}

// CreateArticleFavoriteWithResponse request returning *CreateArticleFavoriteResponse
func (c *ClientWithResponses) CreateArticleFavoriteWithResponse(ctx context.Context, slug string, reqEditors ...RequestEditorFn) (*CreateArticleFavoriteResponse, error) {
	rsp, err := c.CreateArticleFavorite(ctx, slug, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateArticleFavoriteResponse(rsp)
}

// GetProfileByUsernameWithResponse request returning *GetProfileByUsernameResponse
func (c *ClientWithResponses) GetProfileByUsernameWithResponse(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*GetProfileByUsernameResponse, error) {
	rsp, err := c.GetProfileByUsername(ctx, username, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProfileByUsernameResponse(rsp)
}

// UnfollowUserByUsernameWithResponse request returning *UnfollowUserByUsernameResponse
func (c *ClientWithResponses) UnfollowUserByUsernameWithResponse(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*UnfollowUserByUsernameResponse, error) {
	rsp, err := c.UnfollowUserByUsername(ctx, username, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUnfollowUserByUsernameResponse(rsp)
}

// FollowUserByUsernameWithResponse request returning *FollowUserByUsernameResponse
func (c *ClientWithResponses) FollowUserByUsernameWithResponse(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*FollowUserByUsernameResponse, error) {
	rsp, err := c.FollowUserByUsername(ctx, username, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFollowUserByUsernameResponse(rsp)
}

// GetTagsWithResponse request returning *GetTagsResponse
func (c *ClientWithResponses) GetTagsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTagsResponse, error) {
	rsp, err := c.GetTags(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTagsResponse(rsp)
}

// GetCurrentUserWithResponse request returning *GetCurrentUserResponse
func (c *ClientWithResponses) GetCurrentUserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCurrentUserResponse, error) {
	rsp, err := c.GetCurrentUser(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCurrentUserResponse(rsp)
}

// UpdateCurrentUserWithBodyWithResponse request with arbitrary body returning *UpdateCurrentUserResponse
func (c *ClientWithResponses) UpdateCurrentUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCurrentUserResponse, error) {
	rsp, err := c.UpdateCurrentUserWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCurrentUserResponse(rsp)
}

func (c *ClientWithResponses) UpdateCurrentUserWithResponse(ctx context.Context, body UpdateCurrentUserJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCurrentUserResponse, error) {
	rsp, err := c.UpdateCurrentUser(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCurrentUserResponse(rsp)
}

// CreateUserWithBodyWithResponse request with arbitrary body returning *CreateUserResponse
func (c *ClientWithResponses) CreateUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUserResponse, error) {
	rsp, err := c.CreateUserWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUserResponse(rsp)
}

func (c *ClientWithResponses) CreateUserWithResponse(ctx context.Context, body CreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateUserResponse, error) {
	rsp, err := c.CreateUser(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUserResponse(rsp)
}

// LoginWithBodyWithResponse request with arbitrary body returning *LoginResponse
func (c *ClientWithResponses) LoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LoginResponse, error) {
	rsp, err := c.LoginWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLoginResponse(rsp)
}

func (c *ClientWithResponses) LoginWithResponse(ctx context.Context, body LoginJSONRequestBody, reqEditors ...RequestEditorFn) (*LoginResponse, error) {
	rsp, err := c.Login(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLoginResponse(rsp)
}

// ParseGetArticlesResponse parses an HTTP response from a GetArticlesWithResponse call
func ParseGetArticlesResponse(rsp *http.Response) (*GetArticlesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetArticlesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Articles      []Article `json:"articles"`
			ArticlesCount int       `json:"articlesCount"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest GenericErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseCreateArticleResponse parses an HTTP response from a CreateArticleWithResponse call
func ParseCreateArticleResponse(rsp *http.Response) (*CreateArticleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateArticleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Article Article `json:"article"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest GenericErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetArticlesFeedResponse parses an HTTP response from a GetArticlesFeedWithResponse call
func ParseGetArticlesFeedResponse(rsp *http.Response) (*GetArticlesFeedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetArticlesFeedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Articles      []Article `json:"articles"`
			ArticlesCount int       `json:"articlesCount"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest GenericErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteArticleResponse parses an HTTP response from a DeleteArticleWithResponse call
func ParseDeleteArticleResponse(rsp *http.Response) (*DeleteArticleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteArticleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest GenericErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetArticleResponse parses an HTTP response from a GetArticleWithResponse call
func ParseGetArticleResponse(rsp *http.Response) (*GetArticleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetArticleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Article Article `json:"article"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest GenericErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseUpdateArticleResponse parses an HTTP response from a UpdateArticleWithResponse call
func ParseUpdateArticleResponse(rsp *http.Response) (*UpdateArticleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateArticleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Article Article `json:"article"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest GenericErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetArticleCommentsResponse parses an HTTP response from a GetArticleCommentsWithResponse call
func ParseGetArticleCommentsResponse(rsp *http.Response) (*GetArticleCommentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetArticleCommentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Comments []Comment `json:"comments"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest GenericErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseCreateArticleCommentResponse parses an HTTP response from a CreateArticleCommentWithResponse call
func ParseCreateArticleCommentResponse(rsp *http.Response) (*CreateArticleCommentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateArticleCommentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Comment Comment `json:"comment"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest GenericErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteArticleCommentResponse parses an HTTP response from a DeleteArticleCommentWithResponse call
func ParseDeleteArticleCommentResponse(rsp *http.Response) (*DeleteArticleCommentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteArticleCommentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest GenericErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteArticleFavoriteResponse parses an HTTP response from a DeleteArticleFavoriteWithResponse call
func ParseDeleteArticleFavoriteResponse(rsp *http.Response) (*DeleteArticleFavoriteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteArticleFavoriteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Article Article `json:"article"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest GenericErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseCreateArticleFavoriteResponse parses an HTTP response from a CreateArticleFavoriteWithResponse call
func ParseCreateArticleFavoriteResponse(rsp *http.Response) (*CreateArticleFavoriteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateArticleFavoriteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Article Article `json:"article"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest GenericErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetProfileByUsernameResponse parses an HTTP response from a GetProfileByUsernameWithResponse call
func ParseGetProfileByUsernameResponse(rsp *http.Response) (*GetProfileByUsernameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProfileByUsernameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Profile Profile `json:"profile"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest GenericErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseUnfollowUserByUsernameResponse parses an HTTP response from a UnfollowUserByUsernameWithResponse call
func ParseUnfollowUserByUsernameResponse(rsp *http.Response) (*UnfollowUserByUsernameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UnfollowUserByUsernameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Profile Profile `json:"profile"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest GenericErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseFollowUserByUsernameResponse parses an HTTP response from a FollowUserByUsernameWithResponse call
func ParseFollowUserByUsernameResponse(rsp *http.Response) (*FollowUserByUsernameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FollowUserByUsernameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Profile Profile `json:"profile"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest GenericErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetTagsResponse parses an HTTP response from a GetTagsWithResponse call
func ParseGetTagsResponse(rsp *http.Response) (*GetTagsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Tags []string `json:"tags"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest GenericErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetCurrentUserResponse parses an HTTP response from a GetCurrentUserWithResponse call
func ParseGetCurrentUserResponse(rsp *http.Response) (*GetCurrentUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCurrentUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			User User `json:"user"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest GenericErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseUpdateCurrentUserResponse parses an HTTP response from a UpdateCurrentUserWithResponse call
func ParseUpdateCurrentUserResponse(rsp *http.Response) (*UpdateCurrentUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateCurrentUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			User User `json:"user"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest GenericErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseCreateUserResponse parses an HTTP response from a CreateUserWithResponse call
func ParseCreateUserResponse(rsp *http.Response) (*CreateUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			User User `json:"user"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest GenericErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseLoginResponse parses an HTTP response from a LoginWithResponse call
func ParseLoginResponse(rsp *http.Response) (*LoginResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LoginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			User User `json:"user"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest GenericErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get recent articles globally
	// (GET /articles)
	GetArticles(ctx echo.Context, params GetArticlesParams) error
	// Create an article
	// (POST /articles)
	CreateArticle(ctx echo.Context) error
	// Get recent articles from users you follow
	// (GET /articles/feed)
	GetArticlesFeed(ctx echo.Context, params GetArticlesFeedParams) error
	// Delete an article
	// (DELETE /articles/{slug})
	DeleteArticle(ctx echo.Context, slug string) error
	// Get an article
	// (GET /articles/{slug})
	GetArticle(ctx echo.Context, slug string) error
	// Update an article
	// (PUT /articles/{slug})
	UpdateArticle(ctx echo.Context, slug string) error
	// Get comments for an article
	// (GET /articles/{slug}/comments)
	GetArticleComments(ctx echo.Context, slug string) error
	// Create a comment for an article
	// (POST /articles/{slug}/comments)
	CreateArticleComment(ctx echo.Context, slug string) error
	// Delete a comment for an article
	// (DELETE /articles/{slug}/comments/{id})
	DeleteArticleComment(ctx echo.Context, slug string, id int) error
	// Unfavorite an article
	// (DELETE /articles/{slug}/favorite)
	DeleteArticleFavorite(ctx echo.Context, slug string) error
	// Favorite an article
	// (POST /articles/{slug}/favorite)
	CreateArticleFavorite(ctx echo.Context, slug string) error
	// Get a profile
	// (GET /profiles/{username})
	GetProfileByUsername(ctx echo.Context, username string) error
	// Unfollow a user
	// (DELETE /profiles/{username}/follow)
	UnfollowUserByUsername(ctx echo.Context, username string) error
	// Follow a user
	// (POST /profiles/{username}/follow)
	FollowUserByUsername(ctx echo.Context, username string) error
	// Get tags
	// (GET /tags)
	GetTags(ctx echo.Context) error
	// Get current user
	// (GET /user)
	GetCurrentUser(ctx echo.Context) error
	// Update current user
	// (PUT /user)
	UpdateCurrentUser(ctx echo.Context) error

	// (POST /users)
	CreateUser(ctx echo.Context) error
	// Existing user login
	// (POST /users/login)
	Login(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetArticles converts echo context to params.
func (w *ServerInterfaceWrapper) GetArticles(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetArticlesParams
	// ------------- Optional query parameter "tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag", ctx.QueryParams(), &params.Tag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tag: %s", err))
	}

	// ------------- Optional query parameter "author" -------------

	err = runtime.BindQueryParameter("form", true, false, "author", ctx.QueryParams(), &params.Author)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter author: %s", err))
	}

	// ------------- Optional query parameter "favorited" -------------

	err = runtime.BindQueryParameter("form", true, false, "favorited", ctx.QueryParams(), &params.Favorited)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter favorited: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetArticles(ctx, params)
	return err
}

// CreateArticle converts echo context to params.
func (w *ServerInterfaceWrapper) CreateArticle(ctx echo.Context) error {
	var err error

	ctx.Set(TokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateArticle(ctx)
	return err
}

// GetArticlesFeed converts echo context to params.
func (w *ServerInterfaceWrapper) GetArticlesFeed(ctx echo.Context) error {
	var err error

	ctx.Set(TokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetArticlesFeedParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetArticlesFeed(ctx, params)
	return err
}

// DeleteArticle converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteArticle(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "slug" -------------
	var slug string

	err = runtime.BindStyledParameterWithLocation("simple", false, "slug", runtime.ParamLocationPath, ctx.Param("slug"), &slug)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slug: %s", err))
	}

	ctx.Set(TokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteArticle(ctx, slug)
	return err
}

// GetArticle converts echo context to params.
func (w *ServerInterfaceWrapper) GetArticle(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "slug" -------------
	var slug string

	err = runtime.BindStyledParameterWithLocation("simple", false, "slug", runtime.ParamLocationPath, ctx.Param("slug"), &slug)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slug: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetArticle(ctx, slug)
	return err
}

// UpdateArticle converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateArticle(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "slug" -------------
	var slug string

	err = runtime.BindStyledParameterWithLocation("simple", false, "slug", runtime.ParamLocationPath, ctx.Param("slug"), &slug)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slug: %s", err))
	}

	ctx.Set(TokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateArticle(ctx, slug)
	return err
}

// GetArticleComments converts echo context to params.
func (w *ServerInterfaceWrapper) GetArticleComments(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "slug" -------------
	var slug string

	err = runtime.BindStyledParameterWithLocation("simple", false, "slug", runtime.ParamLocationPath, ctx.Param("slug"), &slug)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slug: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetArticleComments(ctx, slug)
	return err
}

// CreateArticleComment converts echo context to params.
func (w *ServerInterfaceWrapper) CreateArticleComment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "slug" -------------
	var slug string

	err = runtime.BindStyledParameterWithLocation("simple", false, "slug", runtime.ParamLocationPath, ctx.Param("slug"), &slug)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slug: %s", err))
	}

	ctx.Set(TokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateArticleComment(ctx, slug)
	return err
}

// DeleteArticleComment converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteArticleComment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "slug" -------------
	var slug string

	err = runtime.BindStyledParameterWithLocation("simple", false, "slug", runtime.ParamLocationPath, ctx.Param("slug"), &slug)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slug: %s", err))
	}

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(TokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteArticleComment(ctx, slug, id)
	return err
}

// DeleteArticleFavorite converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteArticleFavorite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "slug" -------------
	var slug string

	err = runtime.BindStyledParameterWithLocation("simple", false, "slug", runtime.ParamLocationPath, ctx.Param("slug"), &slug)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slug: %s", err))
	}

	ctx.Set(TokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteArticleFavorite(ctx, slug)
	return err
}

// CreateArticleFavorite converts echo context to params.
func (w *ServerInterfaceWrapper) CreateArticleFavorite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "slug" -------------
	var slug string

	err = runtime.BindStyledParameterWithLocation("simple", false, "slug", runtime.ParamLocationPath, ctx.Param("slug"), &slug)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slug: %s", err))
	}

	ctx.Set(TokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateArticleFavorite(ctx, slug)
	return err
}

// GetProfileByUsername converts echo context to params.
func (w *ServerInterfaceWrapper) GetProfileByUsername(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "username" -------------
	var username string

	err = runtime.BindStyledParameterWithLocation("simple", false, "username", runtime.ParamLocationPath, ctx.Param("username"), &username)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter username: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetProfileByUsername(ctx, username)
	return err
}

// UnfollowUserByUsername converts echo context to params.
func (w *ServerInterfaceWrapper) UnfollowUserByUsername(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "username" -------------
	var username string

	err = runtime.BindStyledParameterWithLocation("simple", false, "username", runtime.ParamLocationPath, ctx.Param("username"), &username)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter username: %s", err))
	}

	ctx.Set(TokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnfollowUserByUsername(ctx, username)
	return err
}

// FollowUserByUsername converts echo context to params.
func (w *ServerInterfaceWrapper) FollowUserByUsername(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "username" -------------
	var username string

	err = runtime.BindStyledParameterWithLocation("simple", false, "username", runtime.ParamLocationPath, ctx.Param("username"), &username)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter username: %s", err))
	}

	ctx.Set(TokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FollowUserByUsername(ctx, username)
	return err
}

// GetTags converts echo context to params.
func (w *ServerInterfaceWrapper) GetTags(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTags(ctx)
	return err
}

// GetCurrentUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetCurrentUser(ctx echo.Context) error {
	var err error

	ctx.Set(TokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCurrentUser(ctx)
	return err
}

// UpdateCurrentUser converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateCurrentUser(ctx echo.Context) error {
	var err error

	ctx.Set(TokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateCurrentUser(ctx)
	return err
}

// CreateUser converts echo context to params.
func (w *ServerInterfaceWrapper) CreateUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateUser(ctx)
	return err
}

// Login converts echo context to params.
func (w *ServerInterfaceWrapper) Login(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Login(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/articles", wrapper.GetArticles)
	router.POST(baseURL+"/articles", wrapper.CreateArticle)
	router.GET(baseURL+"/articles/feed", wrapper.GetArticlesFeed)
	router.DELETE(baseURL+"/articles/:slug", wrapper.DeleteArticle)
	router.GET(baseURL+"/articles/:slug", wrapper.GetArticle)
	router.PUT(baseURL+"/articles/:slug", wrapper.UpdateArticle)
	router.GET(baseURL+"/articles/:slug/comments", wrapper.GetArticleComments)
	router.POST(baseURL+"/articles/:slug/comments", wrapper.CreateArticleComment)
	router.DELETE(baseURL+"/articles/:slug/comments/:id", wrapper.DeleteArticleComment)
	router.DELETE(baseURL+"/articles/:slug/favorite", wrapper.DeleteArticleFavorite)
	router.POST(baseURL+"/articles/:slug/favorite", wrapper.CreateArticleFavorite)
	router.GET(baseURL+"/profiles/:username", wrapper.GetProfileByUsername)
	router.DELETE(baseURL+"/profiles/:username/follow", wrapper.UnfollowUserByUsername)
	router.POST(baseURL+"/profiles/:username/follow", wrapper.FollowUserByUsername)
	router.GET(baseURL+"/tags", wrapper.GetTags)
	router.GET(baseURL+"/user", wrapper.GetCurrentUser)
	router.PUT(baseURL+"/user", wrapper.UpdateCurrentUser)
	router.POST(baseURL+"/users", wrapper.CreateUser)
	router.POST(baseURL+"/users/login", wrapper.Login)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xbW3PbNhb+KxjsznQ3Q0tOtk96c524k92km0ns6UOSB4g8otCQAAuAdlSP/vsObryC",
	"InVx7G2Tl1gkcK4fzjk4AO9xzPOCM2BK4sU9LoggOSgQ5ldGc6re6Uf6VwIyFrRQlDO8wNdrQKzMlyAk",
	"4itEFeQSKY4EqFKwGY4w1cN+L0FscIQZyQEvLEUcYRmvISeW6oqUmcKLF+cRzimjeZnjxfMIq02hZ1Cm",
	"IAWBt9sI89VKwrhALXnkF1qgJay4ACQVEYqyVD+PeZZBrJBaAxIgy0whCWpIbsu5JXgl63lA1m2EBfxe",
	"glQ/8YSCseYbnlJ2I0G8t2/0s5gzBcz8SYoiozHR2sx/k1ql+wa3QvAChHKkSglC//93ASu8wH+b116c",
	"2zlyXrHDXhoqIMGLj3b250pqvvwNYmWFbpv0UkACTFGSGVOWEnCTkhIlbCP8C9xdCEXjDI5XjFhCY7rV",
	"LHvKeQpT9HM0DBwEEDWk3iXPc2DqePViS2iCeo5lTz1PYZL77Fi04SW6I0yN6vntwOmYHQ7Nl6AIzUzo",
	"0SuYwZ2Gp7ARKKVSgQgpeVMkRMG3hmuL66kQWxqiw0p+O2fW/A73p56NEufUSrsZulAoAyIVevaMM3j2",
	"DK0oZAmiEnk2s74JjBCy4ExaJV7lhdr898t796yfO37R+cDaZxvhn4GBoPErIbjYy3S7jNQk+pYnkAWt",
	"wOBrAbGCBIHhvo3w2zJTtMg8fGRTi+Nga/42iXJM+Aq6lSeJEGSjf3tal7y0ggTydgDtEnenTkGJtwWq",
	"qDQM5MLdKQzkoux0A1XhumugcPiW+2lbzdpG+J3gK6pj19FKFpbSmGqOYU8VP32KJhWNCH+gLM3qCHwq",
	"LE9G8BHB14rusVcrU5UHp8LdZLQdURw4ZeIauNckPcXaUSRtrxsnilSCsnR0hZjpUxTQ4mpqN4yUas0F",
	"/UMTuO9F1MZbPdpkxaOVnJQWj06IZrYjp7ld1FjvLAKj4+SVHOElTzZB39j6MLkwFllxkROFF1jn4jNF",
	"c11u9Ka05A6QXJFbLqiy3nFvl5xnQFjz9XAGibDMyjQMJZK+obbAmYq3CCuqrBF7I23VsYf23Whi/eDs",
	"27Rm20xNo/Qs4NStlfMSN+XrQyjy9f4TgwdNwj59SFvTZNRY/XqsZzZTgsn+c2+dAyOcmR4IAe1RjnlI",
	"9Hpn3xc5JzQLilQQKe+4SFrWrh6OGdvSbVAJydXYlQ/arM0mwl/POCnoWcwTSIGdwVclyJlPIbcko2aT",
	"s6iF2Y5FnANpnjKSHCRCCCXdqGH5Ddh+cPmf0PbToFw1EyYDdH9hIktpuze0D8SHTty2GfgQhuytrwbD",
	"kH3f1bV7x9eUh5MwzzJ+p38EkzDNSTqQEgf17oGBctxk5KmOqNJujkwE74SyYyjLbwdlCCN2yKLDoXbY",
	"mE2k7mnpvswPLq3iX4CdBBQe3h4QlvJOYOiqD+JSULX5oAsUq961F6ldLF9xgUgcg5Smu78GVAiubCPl",
	"4t1rJEDyUsQgI9MMzUup0JrcAhIQA72FBBFEkFmp6N+/XiMjHyIrBaJqJ2rKXKCMp6n+k7IZul5T2Rhv",
	"yKo1MLQEVEpI0ErLlWUNaSpJ0HKDNBwMLYUoQ7eUGNF/uHA7FrMV+QGtgSQgZp/YJ3bR4EYlSnUNo2sc",
	"TUxP1bouNwioWnck18Tn2tyyrUTjxTzTdYXhc70GVC1kZGOqVW8JetKwmGih5yOEkHEV+mr+zTb23+wP",
	"888O+MT8YYudWp+2tCjXAZwU9D+wscGTshX3+zcSm6TnJr8Hkv3KRWZiqMg0eaUKuZjPBZDsTr+Zrfkd",
	"DrTLWVJSZYyY8LjUydRLkNEY3I7RsXn7+hq9cU+7jHgBzLp5xkU6d5Pl/O3r60ZkajLEEb4FIa0gz2fn",
	"s3M9UNMhBcUL/K/Z+ey5yQ9qbRbCvNnDS0H118TPoFDOpTIYZ6pqmaE040uSZZsZupGAzEEXqs/9kOJo",
	"RTOLfFlmSs6Q9ofGGze0iV7JOuYY47xOLK+Luq/XPET82FuqlrYGLEkHTtvsm3rv3Qsxw0TtrgD9w0eW",
	"fw6wqHYPB3GpdmyIrxCxJw+jLJtbvp1cQ5u02qbz5inohOGNQ9zt505j/MX5+dCusBo3H2xAbyP84/nz",
	"cQLdHsyPL16MT2o14U02KPOciI1D9hCo7bZZAw9XiPysMy+XgTVyafaMiDBPqMZ6lcS6WLdzfL3SPOfd",
	"DGvVOAqe989Ltz23TLBquJH6jX3iMrRZ5y43f/ysYVZ7q2fjoIt0Ee3rZ2euM136nfn12ujfVrFvvgLb",
	"VdovAK4Ez5HNhboasIluOBqaBTQBGI0geAXmfScQfl/Xh2IotOKDXgwv/xZm7mVWplsLlwxU4DTwpXm+",
	"X1Swc+qosDMHfsjK1J9ck/pE18njsodO9XXycC3B9kHnrjxyECS6B6VPDwk93wwF/MGQ0HMr42rKoj7Q",
	"qam5NvRoHh3OEidIwuNeKMqAF+xue7/11e4SHOaK6sbEybyxZ+YP3j7ZntatT2u59lx9wuRvA/m8eVY/",
	"uOg1EvxAuysPgG/C9sbfMTgIgWvSvouVgmoJ9ZhxYvASxWMW+QMea2Co8sd4je+pDbp/WsXvu+ynAEAc",
	"EO0Rw1P/puMRsal7KeLpbkwGgBFE2Vikihs3MwYj1fyeJpMK0MMh2ypHTwnZJCDaiSDb67e8funFiQM3",
	"WXdVy+b8d5RzfUXtT14s74PwIHJ962oXaG+YH3UEVK88o1NgtawkepoV+BMr1UL+a0DEu2ZXrr06CAGt",
	"/HpSBHz3/3T/X032vo4Q7vannN/7tvd2ZwFOkJvR6Jg778mNVJBPK8PdufdPmxt/cjgCEz/OM/NS7NqZ",
	"lzXtB8ZG9zLvYxbblYcaXvfXDAZ9Pndtt915wYzxXl9uUMPAnV2+G6u9dryPO7nANwj/yh6flgea/gqi",
	"YTD+T/b01QP5+buXJ0b7UR/rFe/vMA33VUgqJ7ZRzX3tQ4zZupd+omCnrDBeayObVdnf7B5SWdoNSSkE",
	"MJVtzFUKSM4o85bsKX5px95I90navvq3rqw/zbMZZ44umMxHXYQlBiDAlLtdP9YZTmz4oMxePKGcmY1L",
	"h0moP9w19UH92eaHc9s/ocNcT3Zfn421PsxFvWoJ2WvTwSTx3l1LQqT6bHNgS3CoHzufsh50vN5z4kH+",
	"OLVV7R2tYduaq+FmtcBXKs237kH7mnGHmLb3Efv/3Qqp1sGrpoVQ5ixyKo+ZxShufSVjL4jNSUHNab3j",
	"Ut0mu6i/Z6yeXdZf/VXP6m1Y42H94Ub1yH0cVf0e0mb7efu/AAAA//9fhOi0A0IAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
