// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ryutah/realworld-echo/realworld-api/domain/repository (interfaces: Article)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/ryutah/realworld-echo/realworld-api/domain/model"
	premitive "github.com/ryutah/realworld-echo/realworld-api/domain/premitive"
)

// MockArticle is a mock of Article interface.
type MockArticle struct {
	ctrl     *gomock.Controller
	recorder *MockArticleMockRecorder
}

// MockArticleMockRecorder is the mock recorder for MockArticle.
type MockArticleMockRecorder struct {
	mock *MockArticle
}

// NewMockArticle creates a new mock instance.
func NewMockArticle(ctrl *gomock.Controller) *MockArticle {
	mock := &MockArticle{ctrl: ctrl}
	mock.recorder = &MockArticleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArticle) EXPECT() *MockArticleMockRecorder {
	return m.recorder
}

// GenerateID mocks base method.
func (m *MockArticle) GenerateID(arg0 context.Context) (model.ArticleID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateID", arg0)
	ret0, _ := ret[0].(model.ArticleID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateID indicates an expected call of GenerateID.
func (mr *MockArticleMockRecorder) GenerateID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateID", reflect.TypeOf((*MockArticle)(nil).GenerateID), arg0)
}

// Get mocks base method.
func (m *MockArticle) Get(arg0 context.Context, arg1 premitive.Slug) (*model.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*model.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockArticleMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockArticle)(nil).Get), arg0, arg1)
}

// Save mocks base method.
func (m *MockArticle) Save(arg0 context.Context, arg1 model.Article) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockArticleMockRecorder) Save(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockArticle)(nil).Save), arg0, arg1)
}
