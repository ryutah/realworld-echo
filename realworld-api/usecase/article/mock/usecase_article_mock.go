// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ryutah/realworld-echo/realworld-api/usecase/article (interfaces: GetArticleOutputPort)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	article "github.com/ryutah/realworld-echo/realworld-api/usecase/article"
)

// MockGetArticleOutputPort is a mock of GetArticleOutputPort interface.
type MockGetArticleOutputPort struct {
	ctrl     *gomock.Controller
	recorder *MockGetArticleOutputPortMockRecorder
}

// MockGetArticleOutputPortMockRecorder is the mock recorder for MockGetArticleOutputPort.
type MockGetArticleOutputPortMockRecorder struct {
	mock *MockGetArticleOutputPort
}

// NewMockGetArticleOutputPort creates a new mock instance.
func NewMockGetArticleOutputPort(ctrl *gomock.Controller) *MockGetArticleOutputPort {
	mock := &MockGetArticleOutputPort{ctrl: ctrl}
	mock.recorder = &MockGetArticleOutputPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetArticleOutputPort) EXPECT() *MockGetArticleOutputPortMockRecorder {
	return m.recorder
}

// Success mocks base method.
func (m *MockGetArticleOutputPort) Success(arg0 context.Context, arg1 article.GetArticleResult) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Success", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Success indicates an expected call of Success.
func (mr *MockGetArticleOutputPortMockRecorder) Success(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Success", reflect.TypeOf((*MockGetArticleOutputPort)(nil).Success), arg0, arg1)
}
