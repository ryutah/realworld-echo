// Code generated by mockery v2.32.0. DO NOT EDIT.

package sqlc

import (
	context "context"

	gen "github.com/ryutah/realworld-echo/realworld-api/infrastructure/psql/sqlc/gen"
	mock "github.com/stretchr/testify/mock"

	sql "database/sql"

	sqlc "github.com/ryutah/realworld-echo/realworld-api/infrastructure/psql/sqlc"

	sqlx "github.com/jmoiron/sqlx"
)

// MockDBManager is an autogenerated mock type for the DBManager type
type MockDBManager struct {
	mock.Mock
}

type MockDBManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDBManager) EXPECT() *MockDBManager_Expecter {
	return &MockDBManager_Expecter{mock: &_m.Mock}
}

// BeginTx provides a mock function with given fields: _a0, _a1
func (_m *MockDBManager) BeginTx(_a0 context.Context, _a1 *sql.TxOptions) (*sqlx.Tx, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *sqlx.Tx
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.TxOptions) (*sqlx.Tx, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sql.TxOptions) *sqlx.Tx); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqlx.Tx)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sql.TxOptions) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDBManager_BeginTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BeginTx'
type MockDBManager_BeginTx_Call struct {
	*mock.Call
}

// BeginTx is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *sql.TxOptions
func (_e *MockDBManager_Expecter) BeginTx(_a0 interface{}, _a1 interface{}) *MockDBManager_BeginTx_Call {
	return &MockDBManager_BeginTx_Call{Call: _e.mock.On("BeginTx", _a0, _a1)}
}

func (_c *MockDBManager_BeginTx_Call) Run(run func(_a0 context.Context, _a1 *sql.TxOptions)) *MockDBManager_BeginTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sql.TxOptions))
	})
	return _c
}

func (_c *MockDBManager_BeginTx_Call) Return(_a0 *sqlx.Tx, _a1 error) *MockDBManager_BeginTx_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDBManager_BeginTx_Call) RunAndReturn(run func(context.Context, *sql.TxOptions) (*sqlx.Tx, error)) *MockDBManager_BeginTx_Call {
	_c.Call.Return(run)
	return _c
}

// ContextWithExecutor provides a mock function with given fields: _a0, _a1
func (_m *MockDBManager) ContextWithExecutor(_a0 context.Context, _a1 sqlc.ContextExecutor) context.Context {
	ret := _m.Called(_a0, _a1)

	var r0 context.Context
	if rf, ok := ret.Get(0).(func(context.Context, sqlc.ContextExecutor) context.Context); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

// MockDBManager_ContextWithExecutor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContextWithExecutor'
type MockDBManager_ContextWithExecutor_Call struct {
	*mock.Call
}

// ContextWithExecutor is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 sqlc.ContextExecutor
func (_e *MockDBManager_Expecter) ContextWithExecutor(_a0 interface{}, _a1 interface{}) *MockDBManager_ContextWithExecutor_Call {
	return &MockDBManager_ContextWithExecutor_Call{Call: _e.mock.On("ContextWithExecutor", _a0, _a1)}
}

func (_c *MockDBManager_ContextWithExecutor_Call) Run(run func(_a0 context.Context, _a1 sqlc.ContextExecutor)) *MockDBManager_ContextWithExecutor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sqlc.ContextExecutor))
	})
	return _c
}

func (_c *MockDBManager_ContextWithExecutor_Call) Return(_a0 context.Context) *MockDBManager_ContextWithExecutor_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDBManager_ContextWithExecutor_Call) RunAndReturn(run func(context.Context, sqlc.ContextExecutor) context.Context) *MockDBManager_ContextWithExecutor_Call {
	_c.Call.Return(run)
	return _c
}

// Querier provides a mock function with given fields: _a0
func (_m *MockDBManager) Querier(_a0 context.Context) gen.Querier {
	ret := _m.Called(_a0)

	var r0 gen.Querier
	if rf, ok := ret.Get(0).(func(context.Context) gen.Querier); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gen.Querier)
		}
	}

	return r0
}

// MockDBManager_Querier_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Querier'
type MockDBManager_Querier_Call struct {
	*mock.Call
}

// Querier is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *MockDBManager_Expecter) Querier(_a0 interface{}) *MockDBManager_Querier_Call {
	return &MockDBManager_Querier_Call{Call: _e.mock.On("Querier", _a0)}
}

func (_c *MockDBManager_Querier_Call) Run(run func(_a0 context.Context)) *MockDBManager_Querier_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockDBManager_Querier_Call) Return(_a0 gen.Querier) *MockDBManager_Querier_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDBManager_Querier_Call) RunAndReturn(run func(context.Context) gen.Querier) *MockDBManager_Querier_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDBManager creates a new instance of MockDBManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDBManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDBManager {
	mock := &MockDBManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
