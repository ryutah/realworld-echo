// Code generated by mockery v2.32.0. DO NOT EDIT.

package repository

import (
	context "context"

	model "github.com/ryutah/realworld-echo/realworld-api/domain/auth/model"
	mock "github.com/stretchr/testify/mock"
)

// MockUser is an autogenerated mock type for the User type
type MockUser struct {
	mock.Mock
}

type MockUser_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUser) EXPECT() *MockUser_Expecter {
	return &MockUser_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: _a0, _a1
func (_m *MockUser) Get(_a0 context.Context, _a1 model.UserID) (*model.User, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.UserID) (*model.User, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.UserID) *model.User); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.UserID) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUser_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockUser_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 model.UserID
func (_e *MockUser_Expecter) Get(_a0 interface{}, _a1 interface{}) *MockUser_Get_Call {
	return &MockUser_Get_Call{Call: _e.mock.On("Get", _a0, _a1)}
}

func (_c *MockUser_Get_Call) Run(run func(_a0 context.Context, _a1 model.UserID)) *MockUser_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.UserID))
	})
	return _c
}

func (_c *MockUser_Get_Call) Return(_a0 *model.User, _a1 error) *MockUser_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUser_Get_Call) RunAndReturn(run func(context.Context, model.UserID) (*model.User, error)) *MockUser_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: _a0, _a1
func (_m *MockUser) List(_a0 context.Context, _a1 ...model.UserID) ([]model.User, error) {
	_va := make([]interface{}, len(_a1))
	for _i := range _a1 {
		_va[_i] = _a1[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...model.UserID) ([]model.User, error)); ok {
		return rf(_a0, _a1...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...model.UserID) []model.User); ok {
		r0 = rf(_a0, _a1...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...model.UserID) error); ok {
		r1 = rf(_a0, _a1...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUser_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockUser_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 ...model.UserID
func (_e *MockUser_Expecter) List(_a0 interface{}, _a1 ...interface{}) *MockUser_List_Call {
	return &MockUser_List_Call{Call: _e.mock.On("List",
		append([]interface{}{_a0}, _a1...)...)}
}

func (_c *MockUser_List_Call) Run(run func(_a0 context.Context, _a1 ...model.UserID)) *MockUser_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]model.UserID, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(model.UserID)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockUser_List_Call) Return(_a0 []model.User, _a1 error) *MockUser_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUser_List_Call) RunAndReturn(run func(context.Context, ...model.UserID) ([]model.User, error)) *MockUser_List_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUser creates a new instance of MockUser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUser(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUser {
	mock := &MockUser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
