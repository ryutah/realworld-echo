// Code generated by mockery v2.32.0. DO NOT EDIT.

package service

import (
	context "context"

	model "github.com/ryutah/realworld-echo/realworld-api/domain/auth/model"
	mock "github.com/stretchr/testify/mock"
)

// MockAuth is an autogenerated mock type for the Auth type
type MockAuth struct {
	mock.Mock
}

type MockAuth_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuth) EXPECT() *MockAuth_Expecter {
	return &MockAuth_Expecter{mock: &_m.Mock}
}

// CurrentUser provides a mock function with given fields: _a0
func (_m *MockAuth) CurrentUser(_a0 context.Context) (*model.User, error) {
	ret := _m.Called(_a0)

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*model.User, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *model.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuth_CurrentUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CurrentUser'
type MockAuth_CurrentUser_Call struct {
	*mock.Call
}

// CurrentUser is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *MockAuth_Expecter) CurrentUser(_a0 interface{}) *MockAuth_CurrentUser_Call {
	return &MockAuth_CurrentUser_Call{Call: _e.mock.On("CurrentUser", _a0)}
}

func (_c *MockAuth_CurrentUser_Call) Run(run func(_a0 context.Context)) *MockAuth_CurrentUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockAuth_CurrentUser_Call) Return(_a0 *model.User, _a1 error) *MockAuth_CurrentUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuth_CurrentUser_Call) RunAndReturn(run func(context.Context) (*model.User, error)) *MockAuth_CurrentUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAuth creates a new instance of MockAuth. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuth(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuth {
	mock := &MockAuth{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
