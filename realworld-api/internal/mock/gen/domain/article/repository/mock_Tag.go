// Code generated by mockery v2.32.0. DO NOT EDIT.

package repository

import (
	context "context"

	model "github.com/ryutah/realworld-echo/realworld-api/domain/article/model"
	mock "github.com/stretchr/testify/mock"
)

// MockTag is an autogenerated mock type for the Tag type
type MockTag struct {
	mock.Mock
}

type MockTag_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTag) EXPECT() *MockTag_Expecter {
	return &MockTag_Expecter{mock: &_m.Mock}
}

// BulkSave provides a mock function with given fields: _a0, _a1
func (_m *MockTag) BulkSave(_a0 context.Context, _a1 []model.Tag) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []model.Tag) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTag_BulkSave_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BulkSave'
type MockTag_BulkSave_Call struct {
	*mock.Call
}

// BulkSave is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 []model.Tag
func (_e *MockTag_Expecter) BulkSave(_a0 interface{}, _a1 interface{}) *MockTag_BulkSave_Call {
	return &MockTag_BulkSave_Call{Call: _e.mock.On("BulkSave", _a0, _a1)}
}

func (_c *MockTag_BulkSave_Call) Run(run func(_a0 context.Context, _a1 []model.Tag)) *MockTag_BulkSave_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]model.Tag))
	})
	return _c
}

func (_c *MockTag_BulkSave_Call) Return(_a0 error) *MockTag_BulkSave_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTag_BulkSave_Call) RunAndReturn(run func(context.Context, []model.Tag) error) *MockTag_BulkSave_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTag creates a new instance of MockTag. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTag(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTag {
	mock := &MockTag{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
