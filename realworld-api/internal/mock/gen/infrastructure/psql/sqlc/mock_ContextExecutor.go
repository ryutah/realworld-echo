// Code generated by mockery v2.32.0. DO NOT EDIT.

package sqlc

import (
	context "context"

	pgconn "github.com/jackc/pgx/v5/pgconn"
	mock "github.com/stretchr/testify/mock"

	pgx "github.com/jackc/pgx/v5"
)

// MockContextExecutor is an autogenerated mock type for the ContextExecutor type
type MockContextExecutor struct {
	mock.Mock
}

type MockContextExecutor_Expecter struct {
	mock *mock.Mock
}

func (_m *MockContextExecutor) EXPECT() *MockContextExecutor_Expecter {
	return &MockContextExecutor_Expecter{mock: &_m.Mock}
}

// CopyFrom provides a mock function with given fields: ctx, tableName, columnNames, rowSrc
func (_m *MockContextExecutor) CopyFrom(ctx context.Context, tableName pgx.Identifier, columnNames []string, rowSrc pgx.CopyFromSource) (int64, error) {
	ret := _m.Called(ctx, tableName, columnNames, rowSrc)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, pgx.Identifier, []string, pgx.CopyFromSource) (int64, error)); ok {
		return rf(ctx, tableName, columnNames, rowSrc)
	}
	if rf, ok := ret.Get(0).(func(context.Context, pgx.Identifier, []string, pgx.CopyFromSource) int64); ok {
		r0 = rf(ctx, tableName, columnNames, rowSrc)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, pgx.Identifier, []string, pgx.CopyFromSource) error); ok {
		r1 = rf(ctx, tableName, columnNames, rowSrc)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockContextExecutor_CopyFrom_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CopyFrom'
type MockContextExecutor_CopyFrom_Call struct {
	*mock.Call
}

// CopyFrom is a helper method to define mock.On call
//   - ctx context.Context
//   - tableName pgx.Identifier
//   - columnNames []string
//   - rowSrc pgx.CopyFromSource
func (_e *MockContextExecutor_Expecter) CopyFrom(ctx interface{}, tableName interface{}, columnNames interface{}, rowSrc interface{}) *MockContextExecutor_CopyFrom_Call {
	return &MockContextExecutor_CopyFrom_Call{Call: _e.mock.On("CopyFrom", ctx, tableName, columnNames, rowSrc)}
}

func (_c *MockContextExecutor_CopyFrom_Call) Run(run func(ctx context.Context, tableName pgx.Identifier, columnNames []string, rowSrc pgx.CopyFromSource)) *MockContextExecutor_CopyFrom_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(pgx.Identifier), args[2].([]string), args[3].(pgx.CopyFromSource))
	})
	return _c
}

func (_c *MockContextExecutor_CopyFrom_Call) Return(_a0 int64, _a1 error) *MockContextExecutor_CopyFrom_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockContextExecutor_CopyFrom_Call) RunAndReturn(run func(context.Context, pgx.Identifier, []string, pgx.CopyFromSource) (int64, error)) *MockContextExecutor_CopyFrom_Call {
	_c.Call.Return(run)
	return _c
}

// Exec provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockContextExecutor) Exec(_a0 context.Context, _a1 string, _a2 ...interface{}) (pgconn.CommandTag, error) {
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _a2...)
	ret := _m.Called(_ca...)

	var r0 pgconn.CommandTag
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) (pgconn.CommandTag, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) pgconn.CommandTag); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		r0 = ret.Get(0).(pgconn.CommandTag)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...interface{}) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockContextExecutor_Exec_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exec'
type MockContextExecutor_Exec_Call struct {
	*mock.Call
}

// Exec is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
//   - _a2 ...interface{}
func (_e *MockContextExecutor_Expecter) Exec(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockContextExecutor_Exec_Call {
	return &MockContextExecutor_Exec_Call{Call: _e.mock.On("Exec",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockContextExecutor_Exec_Call) Run(run func(_a0 context.Context, _a1 string, _a2 ...interface{})) *MockContextExecutor_Exec_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockContextExecutor_Exec_Call) Return(_a0 pgconn.CommandTag, _a1 error) *MockContextExecutor_Exec_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockContextExecutor_Exec_Call) RunAndReturn(run func(context.Context, string, ...interface{}) (pgconn.CommandTag, error)) *MockContextExecutor_Exec_Call {
	_c.Call.Return(run)
	return _c
}

// Query provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockContextExecutor) Query(_a0 context.Context, _a1 string, _a2 ...interface{}) (pgx.Rows, error) {
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _a2...)
	ret := _m.Called(_ca...)

	var r0 pgx.Rows
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) (pgx.Rows, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) pgx.Rows); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pgx.Rows)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...interface{}) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockContextExecutor_Query_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Query'
type MockContextExecutor_Query_Call struct {
	*mock.Call
}

// Query is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
//   - _a2 ...interface{}
func (_e *MockContextExecutor_Expecter) Query(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockContextExecutor_Query_Call {
	return &MockContextExecutor_Query_Call{Call: _e.mock.On("Query",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockContextExecutor_Query_Call) Run(run func(_a0 context.Context, _a1 string, _a2 ...interface{})) *MockContextExecutor_Query_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockContextExecutor_Query_Call) Return(_a0 pgx.Rows, _a1 error) *MockContextExecutor_Query_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockContextExecutor_Query_Call) RunAndReturn(run func(context.Context, string, ...interface{}) (pgx.Rows, error)) *MockContextExecutor_Query_Call {
	_c.Call.Return(run)
	return _c
}

// QueryRow provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockContextExecutor) QueryRow(_a0 context.Context, _a1 string, _a2 ...interface{}) pgx.Row {
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _a2...)
	ret := _m.Called(_ca...)

	var r0 pgx.Row
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) pgx.Row); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pgx.Row)
		}
	}

	return r0
}

// MockContextExecutor_QueryRow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryRow'
type MockContextExecutor_QueryRow_Call struct {
	*mock.Call
}

// QueryRow is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
//   - _a2 ...interface{}
func (_e *MockContextExecutor_Expecter) QueryRow(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockContextExecutor_QueryRow_Call {
	return &MockContextExecutor_QueryRow_Call{Call: _e.mock.On("QueryRow",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockContextExecutor_QueryRow_Call) Run(run func(_a0 context.Context, _a1 string, _a2 ...interface{})) *MockContextExecutor_QueryRow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockContextExecutor_QueryRow_Call) Return(_a0 pgx.Row) *MockContextExecutor_QueryRow_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContextExecutor_QueryRow_Call) RunAndReturn(run func(context.Context, string, ...interface{}) pgx.Row) *MockContextExecutor_QueryRow_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockContextExecutor creates a new instance of MockContextExecutor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockContextExecutor(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockContextExecutor {
	mock := &MockContextExecutor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
