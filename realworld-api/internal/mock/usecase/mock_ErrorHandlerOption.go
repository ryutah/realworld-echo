// Code generated by mockery v2.32.0. DO NOT EDIT.

package usecase

import (
	usecase "github.com/ryutah/realworld-echo/realworld-api/usecase"
	mock "github.com/stretchr/testify/mock"
)

// MockErrorHandlerOption is an autogenerated mock type for the ErrorHandlerOption type
type MockErrorHandlerOption struct {
	mock.Mock
}

type MockErrorHandlerOption_Expecter struct {
	mock *mock.Mock
}

func (_m *MockErrorHandlerOption) EXPECT() *MockErrorHandlerOption_Expecter {
	return &MockErrorHandlerOption_Expecter{mock: &_m.Mock}
}

// Apply provides a mock function with given fields: _a0
func (_m *MockErrorHandlerOption) Apply(_a0 *usecase.ErrorHandlerConfig) {
	_m.Called(_a0)
}

// MockErrorHandlerOption_Apply_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Apply'
type MockErrorHandlerOption_Apply_Call struct {
	*mock.Call
}

// Apply is a helper method to define mock.On call
//   - _a0 *usecase.ErrorHandlerConfig
func (_e *MockErrorHandlerOption_Expecter) Apply(_a0 interface{}) *MockErrorHandlerOption_Apply_Call {
	return &MockErrorHandlerOption_Apply_Call{Call: _e.mock.On("Apply", _a0)}
}

func (_c *MockErrorHandlerOption_Apply_Call) Run(run func(_a0 *usecase.ErrorHandlerConfig)) *MockErrorHandlerOption_Apply_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*usecase.ErrorHandlerConfig))
	})
	return _c
}

func (_c *MockErrorHandlerOption_Apply_Call) Return() *MockErrorHandlerOption_Apply_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockErrorHandlerOption_Apply_Call) RunAndReturn(run func(*usecase.ErrorHandlerConfig)) *MockErrorHandlerOption_Apply_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockErrorHandlerOption creates a new instance of MockErrorHandlerOption. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockErrorHandlerOption(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockErrorHandlerOption {
	mock := &MockErrorHandlerOption{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
