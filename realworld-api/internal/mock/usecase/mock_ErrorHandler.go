// Code generated by mockery v2.32.0. DO NOT EDIT.

package usecase

import (
	context "context"

	usecase "github.com/ryutah/realworld-echo/realworld-api/usecase"
	mock "github.com/stretchr/testify/mock"
)

// MockErrorHandler is an autogenerated mock type for the ErrorHandler type
type MockErrorHandler[R interface{}] struct {
	mock.Mock
}

type MockErrorHandler_Expecter[R interface{}] struct {
	mock *mock.Mock
}

func (_m *MockErrorHandler[R]) EXPECT() *MockErrorHandler_Expecter[R] {
	return &MockErrorHandler_Expecter[R]{mock: &_m.Mock}
}

// Handle provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockErrorHandler[R]) Handle(_a0 context.Context, _a1 error, _a2 ...usecase.ErrorHandlerOption) *usecase.Result[R] {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *usecase.Result[R]
	if rf, ok := ret.Get(0).(func(context.Context, error, ...usecase.ErrorHandlerOption) *usecase.Result[R]); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*usecase.Result[R])
		}
	}

	return r0
}

// MockErrorHandler_Handle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Handle'
type MockErrorHandler_Handle_Call[R interface{}] struct {
	*mock.Call
}

// Handle is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 error
//   - _a2 ...usecase.ErrorHandlerOption
func (_e *MockErrorHandler_Expecter[R]) Handle(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockErrorHandler_Handle_Call[R] {
	return &MockErrorHandler_Handle_Call[R]{Call: _e.mock.On("Handle",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockErrorHandler_Handle_Call[R]) Run(run func(_a0 context.Context, _a1 error, _a2 ...usecase.ErrorHandlerOption)) *MockErrorHandler_Handle_Call[R] {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]usecase.ErrorHandlerOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(usecase.ErrorHandlerOption)
			}
		}
		run(args[0].(context.Context), args[1].(error), variadicArgs...)
	})
	return _c
}

func (_c *MockErrorHandler_Handle_Call[R]) Return(_a0 *usecase.Result[R]) *MockErrorHandler_Handle_Call[R] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockErrorHandler_Handle_Call[R]) RunAndReturn(run func(context.Context, error, ...usecase.ErrorHandlerOption) *usecase.Result[R]) *MockErrorHandler_Handle_Call[R] {
	_c.Call.Return(run)
	return _c
}

// NewMockErrorHandler creates a new instance of MockErrorHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockErrorHandler[R interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockErrorHandler[R] {
	mock := &MockErrorHandler[R]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
