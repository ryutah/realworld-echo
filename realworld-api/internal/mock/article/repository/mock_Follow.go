// Code generated by mockery v2.32.0. DO NOT EDIT.

package repository

import (
	context "context"

	articlemodel "github.com/ryutah/realworld-echo/realworld-api/domain/article/model"

	mock "github.com/stretchr/testify/mock"

	model "github.com/ryutah/realworld-echo/realworld-api/domain/auth/model"
)

// MockFollow is an autogenerated mock type for the Follow type
type MockFollow struct {
	mock.Mock
}

type MockFollow_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFollow) EXPECT() *MockFollow_Expecter {
	return &MockFollow_Expecter{mock: &_m.Mock}
}

// ExistsList provides a mock function with given fields: ctx, followedBy, following
func (_m *MockFollow) ExistsList(ctx context.Context, followedBy model.UserID, following ...model.UserID) (articlemodel.FollowersExistsMap, error) {
	_va := make([]interface{}, len(following))
	for _i := range following {
		_va[_i] = following[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, followedBy)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 articlemodel.FollowersExistsMap
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.UserID, ...model.UserID) (articlemodel.FollowersExistsMap, error)); ok {
		return rf(ctx, followedBy, following...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.UserID, ...model.UserID) articlemodel.FollowersExistsMap); ok {
		r0 = rf(ctx, followedBy, following...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(articlemodel.FollowersExistsMap)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.UserID, ...model.UserID) error); ok {
		r1 = rf(ctx, followedBy, following...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFollow_ExistsList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExistsList'
type MockFollow_ExistsList_Call struct {
	*mock.Call
}

// ExistsList is a helper method to define mock.On call
//   - ctx context.Context
//   - followedBy model.UserID
//   - following ...model.UserID
func (_e *MockFollow_Expecter) ExistsList(ctx interface{}, followedBy interface{}, following ...interface{}) *MockFollow_ExistsList_Call {
	return &MockFollow_ExistsList_Call{Call: _e.mock.On("ExistsList",
		append([]interface{}{ctx, followedBy}, following...)...)}
}

func (_c *MockFollow_ExistsList_Call) Run(run func(ctx context.Context, followedBy model.UserID, following ...model.UserID)) *MockFollow_ExistsList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]model.UserID, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(model.UserID)
			}
		}
		run(args[0].(context.Context), args[1].(model.UserID), variadicArgs...)
	})
	return _c
}

func (_c *MockFollow_ExistsList_Call) Return(_a0 articlemodel.FollowersExistsMap, _a1 error) *MockFollow_ExistsList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFollow_ExistsList_Call) RunAndReturn(run func(context.Context, model.UserID, ...model.UserID) (articlemodel.FollowersExistsMap, error)) *MockFollow_ExistsList_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockFollow creates a new instance of MockFollow. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFollow(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFollow {
	mock := &MockFollow{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
